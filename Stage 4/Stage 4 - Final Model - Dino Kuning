{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"YHzOZqAkVTsK","executionInfo":{"status":"ok","timestamp":1745304664733,"user_tz":-420,"elapsed":2446,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nFAjsm9CmB0E","outputId":"7db62e8e-e9d8-4e37-e6db-0cee07e60596","executionInfo":{"status":"ok","timestamp":1745304688266,"user_tz":-420,"elapsed":23536,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"mF-Et2pJVaqU","outputId":"79d40795-54bf-4f64-ec68-6d07e1e32f0d","scrolled":true,"executionInfo":{"status":"ok","timestamp":1745304695777,"user_tz":-420,"elapsed":7510,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["        SK_ID_CURR  TARGET NAME_CONTRACT_TYPE CODE_GENDER FLAG_OWN_CAR  \\\n","0           100002       1         Cash loans           M            N   \n","1           100003       0         Cash loans           F            N   \n","2           100004       0    Revolving loans           M            Y   \n","3           100006       0         Cash loans           F            N   \n","4           100007       0         Cash loans           M            N   \n","...            ...     ...                ...         ...          ...   \n","307506      456251       0         Cash loans           M            N   \n","307507      456252       0         Cash loans           F            N   \n","307508      456253       0         Cash loans           F            N   \n","307509      456254       1         Cash loans           F            N   \n","307510      456255       0         Cash loans           F            N   \n","\n","       FLAG_OWN_REALTY  CNT_CHILDREN  AMT_INCOME_TOTAL  AMT_CREDIT  \\\n","0                    Y             0          202500.0    406597.5   \n","1                    N             0          270000.0   1293502.5   \n","2                    Y             0           67500.0    135000.0   \n","3                    Y             0          135000.0    312682.5   \n","4                    Y             0          121500.0    513000.0   \n","...                ...           ...               ...         ...   \n","307506               N             0          157500.0    254700.0   \n","307507               Y             0           72000.0    269550.0   \n","307508               Y             0          153000.0    677664.0   \n","307509               Y             0          171000.0    370107.0   \n","307510               N             0          157500.0    675000.0   \n","\n","        AMT_ANNUITY  ...  FLAG_DOCUMENT_18 FLAG_DOCUMENT_19 FLAG_DOCUMENT_20  \\\n","0           24700.5  ...                 0                0                0   \n","1           35698.5  ...                 0                0                0   \n","2            6750.0  ...                 0                0                0   \n","3           29686.5  ...                 0                0                0   \n","4           21865.5  ...                 0                0                0   \n","...             ...  ...               ...              ...              ...   \n","307506      27558.0  ...                 0                0                0   \n","307507      12001.5  ...                 0                0                0   \n","307508      29979.0  ...                 0                0                0   \n","307509      20205.0  ...                 0                0                0   \n","307510      49117.5  ...                 0                0                0   \n","\n","       FLAG_DOCUMENT_21 AMT_REQ_CREDIT_BUREAU_HOUR AMT_REQ_CREDIT_BUREAU_DAY  \\\n","0                     0                        0.0                       0.0   \n","1                     0                        0.0                       0.0   \n","2                     0                        0.0                       0.0   \n","3                     0                        NaN                       NaN   \n","4                     0                        0.0                       0.0   \n","...                 ...                        ...                       ...   \n","307506                0                        NaN                       NaN   \n","307507                0                        NaN                       NaN   \n","307508                0                        1.0                       0.0   \n","307509                0                        0.0                       0.0   \n","307510                0                        0.0                       0.0   \n","\n","        AMT_REQ_CREDIT_BUREAU_WEEK  AMT_REQ_CREDIT_BUREAU_MON  \\\n","0                              0.0                        0.0   \n","1                              0.0                        0.0   \n","2                              0.0                        0.0   \n","3                              NaN                        NaN   \n","4                              0.0                        0.0   \n","...                            ...                        ...   \n","307506                         NaN                        NaN   \n","307507                         NaN                        NaN   \n","307508                         0.0                        1.0   \n","307509                         0.0                        0.0   \n","307510                         0.0                        2.0   \n","\n","        AMT_REQ_CREDIT_BUREAU_QRT  AMT_REQ_CREDIT_BUREAU_YEAR  \n","0                             0.0                         1.0  \n","1                             0.0                         0.0  \n","2                             0.0                         0.0  \n","3                             NaN                         NaN  \n","4                             0.0                         0.0  \n","...                           ...                         ...  \n","307506                        NaN                         NaN  \n","307507                        NaN                         NaN  \n","307508                        0.0                         1.0  \n","307509                        0.0                         0.0  \n","307510                        0.0                         1.0  \n","\n","[307511 rows x 122 columns]"],"text/html":["\n","  <div id=\"df-6d77912e-a162-437c-8967-6a2c20076c74\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>SK_ID_CURR</th>\n","      <th>TARGET</th>\n","      <th>NAME_CONTRACT_TYPE</th>\n","      <th>CODE_GENDER</th>\n","      <th>FLAG_OWN_CAR</th>\n","      <th>FLAG_OWN_REALTY</th>\n","      <th>CNT_CHILDREN</th>\n","      <th>AMT_INCOME_TOTAL</th>\n","      <th>AMT_CREDIT</th>\n","      <th>AMT_ANNUITY</th>\n","      <th>...</th>\n","      <th>FLAG_DOCUMENT_18</th>\n","      <th>FLAG_DOCUMENT_19</th>\n","      <th>FLAG_DOCUMENT_20</th>\n","      <th>FLAG_DOCUMENT_21</th>\n","      <th>AMT_REQ_CREDIT_BUREAU_HOUR</th>\n","      <th>AMT_REQ_CREDIT_BUREAU_DAY</th>\n","      <th>AMT_REQ_CREDIT_BUREAU_WEEK</th>\n","      <th>AMT_REQ_CREDIT_BUREAU_MON</th>\n","      <th>AMT_REQ_CREDIT_BUREAU_QRT</th>\n","      <th>AMT_REQ_CREDIT_BUREAU_YEAR</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>100002</td>\n","      <td>1</td>\n","      <td>Cash loans</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>202500.0</td>\n","      <td>406597.5</td>\n","      <td>24700.5</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>100003</td>\n","      <td>0</td>\n","      <td>Cash loans</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0</td>\n","      <td>270000.0</td>\n","      <td>1293502.5</td>\n","      <td>35698.5</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>100004</td>\n","      <td>0</td>\n","      <td>Revolving loans</td>\n","      <td>M</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>67500.0</td>\n","      <td>135000.0</td>\n","      <td>6750.0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>100006</td>\n","      <td>0</td>\n","      <td>Cash loans</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>135000.0</td>\n","      <td>312682.5</td>\n","      <td>29686.5</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>100007</td>\n","      <td>0</td>\n","      <td>Cash loans</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>121500.0</td>\n","      <td>513000.0</td>\n","      <td>21865.5</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>307506</th>\n","      <td>456251</td>\n","      <td>0</td>\n","      <td>Cash loans</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0</td>\n","      <td>157500.0</td>\n","      <td>254700.0</td>\n","      <td>27558.0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>307507</th>\n","      <td>456252</td>\n","      <td>0</td>\n","      <td>Cash loans</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>72000.0</td>\n","      <td>269550.0</td>\n","      <td>12001.5</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>307508</th>\n","      <td>456253</td>\n","      <td>0</td>\n","      <td>Cash loans</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>153000.0</td>\n","      <td>677664.0</td>\n","      <td>29979.0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>307509</th>\n","      <td>456254</td>\n","      <td>1</td>\n","      <td>Cash loans</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>171000.0</td>\n","      <td>370107.0</td>\n","      <td>20205.0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>307510</th>\n","      <td>456255</td>\n","      <td>0</td>\n","      <td>Cash loans</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0</td>\n","      <td>157500.0</td>\n","      <td>675000.0</td>\n","      <td>49117.5</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>307511 rows × 122 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6d77912e-a162-437c-8967-6a2c20076c74')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6d77912e-a162-437c-8967-6a2c20076c74 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6d77912e-a162-437c-8967-6a2c20076c74');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-07f01f68-2e92-40f2-bd3b-16bf50eee456\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-07f01f68-2e92-40f2-bd3b-16bf50eee456')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-07f01f68-2e92-40f2-bd3b-16bf50eee456 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_b6ecb0f1-3145-44de-9376-0d3030cabf4f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_b6ecb0f1-3145-44de-9376-0d3030cabf4f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":3}],"source":["# Load data train\n","df = pd.read_csv('/content/gdrive/MyDrive/homecredit/application_train.csv')\n","df"]},{"cell_type":"markdown","metadata":{"id":"8yGUl_UbKZ0X"},"source":["## Checking Data Train"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"06Q7oZtvKZ0X","outputId":"e9ba1bab-dc27-49d8-b2fa-f2a3d884ee8e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1745304695816,"user_tz":-420,"elapsed":21,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['SK_ID_CURR', 'TARGET', 'NAME_CONTRACT_TYPE', 'CODE_GENDER',\n","       'FLAG_OWN_CAR', 'FLAG_OWN_REALTY', 'CNT_CHILDREN',\n","       'AMT_INCOME_TOTAL', 'AMT_CREDIT', 'AMT_ANNUITY', 'AMT_GOODS_PRICE',\n","       'NAME_TYPE_SUITE', 'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE',\n","       'NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE',\n","       'REGION_POPULATION_RELATIVE', 'DAYS_BIRTH', 'DAYS_EMPLOYED',\n","       'DAYS_REGISTRATION', 'DAYS_ID_PUBLISH', 'OWN_CAR_AGE',\n","       'FLAG_MOBIL', 'FLAG_EMP_PHONE', 'FLAG_WORK_PHONE',\n","       'FLAG_CONT_MOBILE', 'FLAG_PHONE', 'FLAG_EMAIL', 'OCCUPATION_TYPE',\n","       'CNT_FAM_MEMBERS', 'REGION_RATING_CLIENT',\n","       'REGION_RATING_CLIENT_W_CITY', 'WEEKDAY_APPR_PROCESS_START',\n","       'HOUR_APPR_PROCESS_START', 'REG_REGION_NOT_LIVE_REGION',\n","       'REG_REGION_NOT_WORK_REGION', 'LIVE_REGION_NOT_WORK_REGION',\n","       'REG_CITY_NOT_LIVE_CITY', 'REG_CITY_NOT_WORK_CITY',\n","       'LIVE_CITY_NOT_WORK_CITY', 'ORGANIZATION_TYPE', 'EXT_SOURCE_1',\n","       'EXT_SOURCE_2', 'EXT_SOURCE_3', 'APARTMENTS_AVG',\n","       'BASEMENTAREA_AVG', 'YEARS_BEGINEXPLUATATION_AVG',\n","       'YEARS_BUILD_AVG', 'COMMONAREA_AVG', 'ELEVATORS_AVG',\n","       'ENTRANCES_AVG', 'FLOORSMAX_AVG', 'FLOORSMIN_AVG', 'LANDAREA_AVG',\n","       'LIVINGAPARTMENTS_AVG', 'LIVINGAREA_AVG',\n","       'NONLIVINGAPARTMENTS_AVG', 'NONLIVINGAREA_AVG', 'APARTMENTS_MODE',\n","       'BASEMENTAREA_MODE', 'YEARS_BEGINEXPLUATATION_MODE',\n","       'YEARS_BUILD_MODE', 'COMMONAREA_MODE', 'ELEVATORS_MODE',\n","       'ENTRANCES_MODE', 'FLOORSMAX_MODE', 'FLOORSMIN_MODE',\n","       'LANDAREA_MODE', 'LIVINGAPARTMENTS_MODE', 'LIVINGAREA_MODE',\n","       'NONLIVINGAPARTMENTS_MODE', 'NONLIVINGAREA_MODE',\n","       'APARTMENTS_MEDI', 'BASEMENTAREA_MEDI',\n","       'YEARS_BEGINEXPLUATATION_MEDI', 'YEARS_BUILD_MEDI',\n","       'COMMONAREA_MEDI', 'ELEVATORS_MEDI', 'ENTRANCES_MEDI',\n","       'FLOORSMAX_MEDI', 'FLOORSMIN_MEDI', 'LANDAREA_MEDI',\n","       'LIVINGAPARTMENTS_MEDI', 'LIVINGAREA_MEDI',\n","       'NONLIVINGAPARTMENTS_MEDI', 'NONLIVINGAREA_MEDI',\n","       'FONDKAPREMONT_MODE', 'HOUSETYPE_MODE', 'TOTALAREA_MODE',\n","       'WALLSMATERIAL_MODE', 'EMERGENCYSTATE_MODE',\n","       'OBS_30_CNT_SOCIAL_CIRCLE', 'DEF_30_CNT_SOCIAL_CIRCLE',\n","       'OBS_60_CNT_SOCIAL_CIRCLE', 'DEF_60_CNT_SOCIAL_CIRCLE',\n","       'DAYS_LAST_PHONE_CHANGE', 'FLAG_DOCUMENT_2', 'FLAG_DOCUMENT_3',\n","       'FLAG_DOCUMENT_4', 'FLAG_DOCUMENT_5', 'FLAG_DOCUMENT_6',\n","       'FLAG_DOCUMENT_7', 'FLAG_DOCUMENT_8', 'FLAG_DOCUMENT_9',\n","       'FLAG_DOCUMENT_10', 'FLAG_DOCUMENT_11', 'FLAG_DOCUMENT_12',\n","       'FLAG_DOCUMENT_13', 'FLAG_DOCUMENT_14', 'FLAG_DOCUMENT_15',\n","       'FLAG_DOCUMENT_16', 'FLAG_DOCUMENT_17', 'FLAG_DOCUMENT_18',\n","       'FLAG_DOCUMENT_19', 'FLAG_DOCUMENT_20', 'FLAG_DOCUMENT_21',\n","       'AMT_REQ_CREDIT_BUREAU_HOUR', 'AMT_REQ_CREDIT_BUREAU_DAY',\n","       'AMT_REQ_CREDIT_BUREAU_WEEK', 'AMT_REQ_CREDIT_BUREAU_MON',\n","       'AMT_REQ_CREDIT_BUREAU_QRT', 'AMT_REQ_CREDIT_BUREAU_YEAR'],\n","      dtype=object)"]},"metadata":{},"execution_count":4}],"source":["df.columns.values"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"tFh3LYN3VKpY","executionInfo":{"status":"ok","timestamp":1745304695819,"user_tz":-420,"elapsed":1,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[],"source":["def missing_values_table(df):\n","    # Total missing values\n","    mis_val = df.isnull().sum()\n","\n","    # Percentage of missing values\n","    mis_val_percent = 100 * df.isnull().sum() / len(df)\n","\n","    # Make a table with the results\n","    mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n","\n","    # Rename the columns\n","    mis_val_table_ren_columns = mis_val_table.rename(\n","    columns = {0 : 'Missing Values', 1 : 'Percent Missing (%)'})\n","\n","    # Sort the table by percentage of missing descending\n","    mis_val_table_ren_columns = mis_val_table_ren_columns[\n","        mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n","    'Percent Missing (%)', ascending=False).round(2)\n","\n","    # Print some summary information\n","    print ('Your selected dataframe has ' + str(df.shape[1]) + ' columns.\\n'\n","            'There are ' + str(mis_val_table_ren_columns.shape[0]) + ' columns that have missing values.')\n","\n","    # Return the dataframe with missing information\n","    return mis_val_table_ren_columns"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":458},"id":"9xS5z5PJVV85","outputId":"aea18a60-b6c4-4381-a1b2-7592a0616892","executionInfo":{"status":"ok","timestamp":1745304696256,"user_tz":-420,"elapsed":436,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Your selected dataframe has 122 columns.\n","There are 67 columns that have missing values.\n"]},{"output_type":"execute_result","data":{"text/plain":["                          Missing Values  Percent Missing (%)\n","COMMONAREA_MEDI                   214865                69.87\n","COMMONAREA_MODE                   214865                69.87\n","COMMONAREA_AVG                    214865                69.87\n","NONLIVINGAPARTMENTS_MODE          213514                69.43\n","NONLIVINGAPARTMENTS_MEDI          213514                69.43\n","...                                  ...                  ...\n","EXT_SOURCE_2                         660                 0.21\n","AMT_GOODS_PRICE                      278                 0.09\n","AMT_ANNUITY                           12                 0.00\n","CNT_FAM_MEMBERS                        2                 0.00\n","DAYS_LAST_PHONE_CHANGE                 1                 0.00\n","\n","[67 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-858d857b-468f-4e73-ab30-680ef629925e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Missing Values</th>\n","      <th>Percent Missing (%)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>COMMONAREA_MEDI</th>\n","      <td>214865</td>\n","      <td>69.87</td>\n","    </tr>\n","    <tr>\n","      <th>COMMONAREA_MODE</th>\n","      <td>214865</td>\n","      <td>69.87</td>\n","    </tr>\n","    <tr>\n","      <th>COMMONAREA_AVG</th>\n","      <td>214865</td>\n","      <td>69.87</td>\n","    </tr>\n","    <tr>\n","      <th>NONLIVINGAPARTMENTS_MODE</th>\n","      <td>213514</td>\n","      <td>69.43</td>\n","    </tr>\n","    <tr>\n","      <th>NONLIVINGAPARTMENTS_MEDI</th>\n","      <td>213514</td>\n","      <td>69.43</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>EXT_SOURCE_2</th>\n","      <td>660</td>\n","      <td>0.21</td>\n","    </tr>\n","    <tr>\n","      <th>AMT_GOODS_PRICE</th>\n","      <td>278</td>\n","      <td>0.09</td>\n","    </tr>\n","    <tr>\n","      <th>AMT_ANNUITY</th>\n","      <td>12</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>CNT_FAM_MEMBERS</th>\n","      <td>2</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>DAYS_LAST_PHONE_CHANGE</th>\n","      <td>1</td>\n","      <td>0.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>67 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-858d857b-468f-4e73-ab30-680ef629925e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-858d857b-468f-4e73-ab30-680ef629925e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-858d857b-468f-4e73-ab30-680ef629925e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4a5b8d7d-6ee8-4a4a-b524-14ae834cc56b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4a5b8d7d-6ee8-4a4a-b524-14ae834cc56b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4a5b8d7d-6ee8-4a4a-b524-14ae834cc56b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"missing_values_table(df)\",\n  \"rows\": 67,\n  \"fields\": [\n    {\n      \"column\": \"Missing Values\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 74086,\n        \"min\": 1,\n        \"max\": 214865,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          278,\n          154350,\n          41519\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Percent Missing (%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24.09276039190349,\n        \"min\": 0.0,\n        \"max\": 69.87,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          0.09,\n          50.18,\n          50.84\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}],"source":["missing_values_table(df)"]},{"cell_type":"markdown","metadata":{"id":"zrg7DGZRN8Q2"},"source":["Terdapat beberapa variabel yang memiliki persentase missing value >50%. Variabel tersebut akan dihapus pada proses preprocessing karena variabel tersebut dianggap tidak terlalu penting, sehingga menghapus kolom tersebut mungkin merupakan pilihan yang baik sekaligus melakukan proses feature engineering (mengurangi variabel)"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":126},"id":"6i08DHJtN8Q3","outputId":"a3719491-1c08-4c28-9a21-a8bd5cae90d1","executionInfo":{"status":"ok","timestamp":1745304697220,"user_tz":-420,"elapsed":963,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Number of duplicate rows in data train: 0\n"]},{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: [SK_ID_CURR, TARGET, NAME_CONTRACT_TYPE, CODE_GENDER, FLAG_OWN_CAR, FLAG_OWN_REALTY, CNT_CHILDREN, AMT_INCOME_TOTAL, AMT_CREDIT, AMT_ANNUITY, AMT_GOODS_PRICE, NAME_TYPE_SUITE, NAME_INCOME_TYPE, NAME_EDUCATION_TYPE, NAME_FAMILY_STATUS, NAME_HOUSING_TYPE, REGION_POPULATION_RELATIVE, DAYS_BIRTH, DAYS_EMPLOYED, DAYS_REGISTRATION, DAYS_ID_PUBLISH, OWN_CAR_AGE, FLAG_MOBIL, FLAG_EMP_PHONE, FLAG_WORK_PHONE, FLAG_CONT_MOBILE, FLAG_PHONE, FLAG_EMAIL, OCCUPATION_TYPE, CNT_FAM_MEMBERS, REGION_RATING_CLIENT, REGION_RATING_CLIENT_W_CITY, WEEKDAY_APPR_PROCESS_START, HOUR_APPR_PROCESS_START, REG_REGION_NOT_LIVE_REGION, REG_REGION_NOT_WORK_REGION, LIVE_REGION_NOT_WORK_REGION, REG_CITY_NOT_LIVE_CITY, REG_CITY_NOT_WORK_CITY, LIVE_CITY_NOT_WORK_CITY, ORGANIZATION_TYPE, EXT_SOURCE_1, EXT_SOURCE_2, EXT_SOURCE_3, APARTMENTS_AVG, BASEMENTAREA_AVG, YEARS_BEGINEXPLUATATION_AVG, YEARS_BUILD_AVG, COMMONAREA_AVG, ELEVATORS_AVG, ENTRANCES_AVG, FLOORSMAX_AVG, FLOORSMIN_AVG, LANDAREA_AVG, LIVINGAPARTMENTS_AVG, LIVINGAREA_AVG, NONLIVINGAPARTMENTS_AVG, NONLIVINGAREA_AVG, APARTMENTS_MODE, BASEMENTAREA_MODE, YEARS_BEGINEXPLUATATION_MODE, YEARS_BUILD_MODE, COMMONAREA_MODE, ELEVATORS_MODE, ENTRANCES_MODE, FLOORSMAX_MODE, FLOORSMIN_MODE, LANDAREA_MODE, LIVINGAPARTMENTS_MODE, LIVINGAREA_MODE, NONLIVINGAPARTMENTS_MODE, NONLIVINGAREA_MODE, APARTMENTS_MEDI, BASEMENTAREA_MEDI, YEARS_BEGINEXPLUATATION_MEDI, YEARS_BUILD_MEDI, COMMONAREA_MEDI, ELEVATORS_MEDI, ENTRANCES_MEDI, FLOORSMAX_MEDI, FLOORSMIN_MEDI, LANDAREA_MEDI, LIVINGAPARTMENTS_MEDI, LIVINGAREA_MEDI, NONLIVINGAPARTMENTS_MEDI, NONLIVINGAREA_MEDI, FONDKAPREMONT_MODE, HOUSETYPE_MODE, TOTALAREA_MODE, WALLSMATERIAL_MODE, EMERGENCYSTATE_MODE, OBS_30_CNT_SOCIAL_CIRCLE, DEF_30_CNT_SOCIAL_CIRCLE, OBS_60_CNT_SOCIAL_CIRCLE, DEF_60_CNT_SOCIAL_CIRCLE, DAYS_LAST_PHONE_CHANGE, FLAG_DOCUMENT_2, FLAG_DOCUMENT_3, FLAG_DOCUMENT_4, FLAG_DOCUMENT_5, ...]\n","Index: []\n","\n","[0 rows x 122 columns]"],"text/html":["\n","  <div id=\"df-1aacd3a3-d7aa-460c-9e0f-a97c98c6fc58\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>SK_ID_CURR</th>\n","      <th>TARGET</th>\n","      <th>NAME_CONTRACT_TYPE</th>\n","      <th>CODE_GENDER</th>\n","      <th>FLAG_OWN_CAR</th>\n","      <th>FLAG_OWN_REALTY</th>\n","      <th>CNT_CHILDREN</th>\n","      <th>AMT_INCOME_TOTAL</th>\n","      <th>AMT_CREDIT</th>\n","      <th>AMT_ANNUITY</th>\n","      <th>...</th>\n","      <th>FLAG_DOCUMENT_18</th>\n","      <th>FLAG_DOCUMENT_19</th>\n","      <th>FLAG_DOCUMENT_20</th>\n","      <th>FLAG_DOCUMENT_21</th>\n","      <th>AMT_REQ_CREDIT_BUREAU_HOUR</th>\n","      <th>AMT_REQ_CREDIT_BUREAU_DAY</th>\n","      <th>AMT_REQ_CREDIT_BUREAU_WEEK</th>\n","      <th>AMT_REQ_CREDIT_BUREAU_MON</th>\n","      <th>AMT_REQ_CREDIT_BUREAU_QRT</th>\n","      <th>AMT_REQ_CREDIT_BUREAU_YEAR</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","<p>0 rows × 122 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1aacd3a3-d7aa-460c-9e0f-a97c98c6fc58')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1aacd3a3-d7aa-460c-9e0f-a97c98c6fc58 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1aacd3a3-d7aa-460c-9e0f-a97c98c6fc58');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","  <div id=\"id_799c6cf2-2a6e-4c80-9c96-86d9145ed261\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('duplicate_rows')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_799c6cf2-2a6e-4c80-9c96-86d9145ed261 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('duplicate_rows');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"duplicate_rows"}},"metadata":{},"execution_count":7}],"source":["duplicate_rows = df[df.duplicated()]\n","print(f\"Number of duplicate rows in data train: {len(duplicate_rows)}\")\n","\n","if len(duplicate_rows) > 0:\n","  print(\"Duplicate rows in df:\")\n","duplicate_rows"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"C3gCVeVSKZ0h","outputId":"28442c4c-9fb1-4e55-8740-e78ebe93af7c","scrolled":true,"colab":{"base_uri":"https://localhost:8080/","height":551},"executionInfo":{"status":"ok","timestamp":1745304697675,"user_tz":-420,"elapsed":453,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                            Jumlah Unique Kategori  \\\n","NAME_CONTRACT_TYPE                               2   \n","CODE_GENDER                                      3   \n","FLAG_OWN_CAR                                     2   \n","FLAG_OWN_REALTY                                  2   \n","NAME_TYPE_SUITE                                  7   \n","NAME_INCOME_TYPE                                 8   \n","NAME_EDUCATION_TYPE                              5   \n","NAME_FAMILY_STATUS                               6   \n","NAME_HOUSING_TYPE                                6   \n","OCCUPATION_TYPE                                 18   \n","WEEKDAY_APPR_PROCESS_START                       7   \n","ORGANIZATION_TYPE                               58   \n","FONDKAPREMONT_MODE                               4   \n","HOUSETYPE_MODE                                   3   \n","WALLSMATERIAL_MODE                               7   \n","EMERGENCYSTATE_MODE                              2   \n","\n","                                                                     Kategori  \n","NAME_CONTRACT_TYPE                              [Cash loans, Revolving loans]  \n","CODE_GENDER                                                       [M, F, XNA]  \n","FLAG_OWN_CAR                                                           [N, Y]  \n","FLAG_OWN_REALTY                                                        [Y, N]  \n","NAME_TYPE_SUITE             [Unaccompanied, Family, Spouse, partner, Child...  \n","NAME_INCOME_TYPE            [Working, State servant, Commercial associate,...  \n","NAME_EDUCATION_TYPE         [Secondary / secondary special, Higher educati...  \n","NAME_FAMILY_STATUS          [Single / not married, Married, Civil marriage...  \n","NAME_HOUSING_TYPE           [House / apartment, Rented apartment, With par...  \n","OCCUPATION_TYPE             [Laborers, Core staff, Accountants, Managers, ...  \n","WEEKDAY_APPR_PROCESS_START  [WEDNESDAY, MONDAY, THURSDAY, SUNDAY, SATURDAY...  \n","ORGANIZATION_TYPE           [Business Entity Type 3, School, Government, R...  \n","FONDKAPREMONT_MODE          [reg oper account, nan, org spec account, reg ...  \n","HOUSETYPE_MODE              [block of flats, nan, terraced house, specific...  \n","WALLSMATERIAL_MODE          [Stone, brick, Block, nan, Panel, Mixed, Woode...  \n","EMERGENCYSTATE_MODE                                            [No, nan, Yes]  "],"text/html":["\n","  <div id=\"df-7848165d-a89a-4fd1-b996-fcd3cf94ac44\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Jumlah Unique Kategori</th>\n","      <th>Kategori</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>NAME_CONTRACT_TYPE</th>\n","      <td>2</td>\n","      <td>[Cash loans, Revolving loans]</td>\n","    </tr>\n","    <tr>\n","      <th>CODE_GENDER</th>\n","      <td>3</td>\n","      <td>[M, F, XNA]</td>\n","    </tr>\n","    <tr>\n","      <th>FLAG_OWN_CAR</th>\n","      <td>2</td>\n","      <td>[N, Y]</td>\n","    </tr>\n","    <tr>\n","      <th>FLAG_OWN_REALTY</th>\n","      <td>2</td>\n","      <td>[Y, N]</td>\n","    </tr>\n","    <tr>\n","      <th>NAME_TYPE_SUITE</th>\n","      <td>7</td>\n","      <td>[Unaccompanied, Family, Spouse, partner, Child...</td>\n","    </tr>\n","    <tr>\n","      <th>NAME_INCOME_TYPE</th>\n","      <td>8</td>\n","      <td>[Working, State servant, Commercial associate,...</td>\n","    </tr>\n","    <tr>\n","      <th>NAME_EDUCATION_TYPE</th>\n","      <td>5</td>\n","      <td>[Secondary / secondary special, Higher educati...</td>\n","    </tr>\n","    <tr>\n","      <th>NAME_FAMILY_STATUS</th>\n","      <td>6</td>\n","      <td>[Single / not married, Married, Civil marriage...</td>\n","    </tr>\n","    <tr>\n","      <th>NAME_HOUSING_TYPE</th>\n","      <td>6</td>\n","      <td>[House / apartment, Rented apartment, With par...</td>\n","    </tr>\n","    <tr>\n","      <th>OCCUPATION_TYPE</th>\n","      <td>18</td>\n","      <td>[Laborers, Core staff, Accountants, Managers, ...</td>\n","    </tr>\n","    <tr>\n","      <th>WEEKDAY_APPR_PROCESS_START</th>\n","      <td>7</td>\n","      <td>[WEDNESDAY, MONDAY, THURSDAY, SUNDAY, SATURDAY...</td>\n","    </tr>\n","    <tr>\n","      <th>ORGANIZATION_TYPE</th>\n","      <td>58</td>\n","      <td>[Business Entity Type 3, School, Government, R...</td>\n","    </tr>\n","    <tr>\n","      <th>FONDKAPREMONT_MODE</th>\n","      <td>4</td>\n","      <td>[reg oper account, nan, org spec account, reg ...</td>\n","    </tr>\n","    <tr>\n","      <th>HOUSETYPE_MODE</th>\n","      <td>3</td>\n","      <td>[block of flats, nan, terraced house, specific...</td>\n","    </tr>\n","    <tr>\n","      <th>WALLSMATERIAL_MODE</th>\n","      <td>7</td>\n","      <td>[Stone, brick, Block, nan, Panel, Mixed, Woode...</td>\n","    </tr>\n","    <tr>\n","      <th>EMERGENCYSTATE_MODE</th>\n","      <td>2</td>\n","      <td>[No, nan, Yes]</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7848165d-a89a-4fd1-b996-fcd3cf94ac44')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7848165d-a89a-4fd1-b996-fcd3cf94ac44 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7848165d-a89a-4fd1-b996-fcd3cf94ac44');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-191c277b-cca7-45a0-b2fa-62b9c6349b24\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-191c277b-cca7-45a0-b2fa-62b9c6349b24')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-191c277b-cca7-45a0-b2fa-62b9c6349b24 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_39cc810e-4016-4520-ac3b-a09e645ae8f9\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('unique')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_39cc810e-4016-4520-ac3b-a09e645ae8f9 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('unique');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"unique","summary":"{\n  \"name\": \"unique\",\n  \"rows\": 16,\n  \"fields\": [\n    {\n      \"column\": \"Jumlah Unique Kategori\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 2,\n        \"max\": 58,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          58,\n          3,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kategori\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}],"source":["unique = df.select_dtypes('object').apply(pd.Series.nunique, axis = 0).to_frame('Jumlah Unique Kategori')\n","\n","def get_unique_values(col):\n","  return df[col].unique().tolist()\n","\n","unique['Kategori'] = unique.index.map(get_unique_values)\n","\n","unique"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"yVHLCIDMKZ0h","outputId":"83e3c770-3d1f-4c72-8d2b-d3769dbe222e","colab":{"base_uri":"https://localhost:8080/","height":487},"executionInfo":{"status":"ok","timestamp":1745304698254,"user_tz":-420,"elapsed":577,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Cek jumlah masing-masing target\n","plt.figure(figsize=(10, 5))\n","ax = sns.countplot(df, x='TARGET', color='wheat')\n","plt.title('Jumlah Kategori/Kelas Data')\n","plt.xlabel('Kategori')\n","plt.ylabel('Jumlah')\n","plt.xticks([0, 1], ['Membayar', 'Tidak Membayar'])\n","\n","for container in ax.containers:\n","    ax.bar_label(container)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"RAv3SaZjKZ0X"},"source":["## **Preprocessing Data**"]},{"cell_type":"code","source":["df = df.drop('SK_ID_CURR', axis=1)"],"metadata":{"id":"KR9Hy_OwFeAI","executionInfo":{"status":"ok","timestamp":1745304698335,"user_tz":-420,"elapsed":80,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","execution_count":11,"metadata":{"id":"YC4LkxjvKZ0X","executionInfo":{"status":"ok","timestamp":1745304698682,"user_tz":-420,"elapsed":330,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[],"source":["# Hapus kolom dengan missing values di atas 50%\n","threshold = 50\n","cols_to_drop = df.columns[df.isnull().mean() * 100 > threshold]\n","df.drop(cols_to_drop, axis=1, inplace=True)"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"Ny0qz42LKZ0X","outputId":"dd59bb36-b6ad-486c-d143-c0a80248a3d1","scrolled":false,"colab":{"base_uri":"https://localhost:8080/","height":899},"executionInfo":{"status":"ok","timestamp":1745304699089,"user_tz":-420,"elapsed":406,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Your selected dataframe has 80 columns.\n","There are 26 columns that have missing values.\n"]},{"output_type":"execute_result","data":{"text/plain":["                              Missing Values  Percent Missing (%)\n","FLOORSMAX_AVG                         153020                49.76\n","FLOORSMAX_MODE                        153020                49.76\n","FLOORSMAX_MEDI                        153020                49.76\n","YEARS_BEGINEXPLUATATION_MEDI          150007                48.78\n","YEARS_BEGINEXPLUATATION_MODE          150007                48.78\n","YEARS_BEGINEXPLUATATION_AVG           150007                48.78\n","TOTALAREA_MODE                        148431                48.27\n","EMERGENCYSTATE_MODE                   145755                47.40\n","OCCUPATION_TYPE                        96391                31.35\n","EXT_SOURCE_3                           60965                19.83\n","AMT_REQ_CREDIT_BUREAU_QRT              41519                13.50\n","AMT_REQ_CREDIT_BUREAU_YEAR             41519                13.50\n","AMT_REQ_CREDIT_BUREAU_WEEK             41519                13.50\n","AMT_REQ_CREDIT_BUREAU_DAY              41519                13.50\n","AMT_REQ_CREDIT_BUREAU_HOUR             41519                13.50\n","AMT_REQ_CREDIT_BUREAU_MON              41519                13.50\n","NAME_TYPE_SUITE                         1292                 0.42\n","OBS_30_CNT_SOCIAL_CIRCLE                1021                 0.33\n","OBS_60_CNT_SOCIAL_CIRCLE                1021                 0.33\n","DEF_30_CNT_SOCIAL_CIRCLE                1021                 0.33\n","DEF_60_CNT_SOCIAL_CIRCLE                1021                 0.33\n","EXT_SOURCE_2                             660                 0.21\n","AMT_GOODS_PRICE                          278                 0.09\n","AMT_ANNUITY                               12                 0.00\n","CNT_FAM_MEMBERS                            2                 0.00\n","DAYS_LAST_PHONE_CHANGE                     1                 0.00"],"text/html":["\n","  <div id=\"df-2f24b916-5478-4903-87a2-5d08b6463026\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Missing Values</th>\n","      <th>Percent Missing (%)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>FLOORSMAX_AVG</th>\n","      <td>153020</td>\n","      <td>49.76</td>\n","    </tr>\n","    <tr>\n","      <th>FLOORSMAX_MODE</th>\n","      <td>153020</td>\n","      <td>49.76</td>\n","    </tr>\n","    <tr>\n","      <th>FLOORSMAX_MEDI</th>\n","      <td>153020</td>\n","      <td>49.76</td>\n","    </tr>\n","    <tr>\n","      <th>YEARS_BEGINEXPLUATATION_MEDI</th>\n","      <td>150007</td>\n","      <td>48.78</td>\n","    </tr>\n","    <tr>\n","      <th>YEARS_BEGINEXPLUATATION_MODE</th>\n","      <td>150007</td>\n","      <td>48.78</td>\n","    </tr>\n","    <tr>\n","      <th>YEARS_BEGINEXPLUATATION_AVG</th>\n","      <td>150007</td>\n","      <td>48.78</td>\n","    </tr>\n","    <tr>\n","      <th>TOTALAREA_MODE</th>\n","      <td>148431</td>\n","      <td>48.27</td>\n","    </tr>\n","    <tr>\n","      <th>EMERGENCYSTATE_MODE</th>\n","      <td>145755</td>\n","      <td>47.40</td>\n","    </tr>\n","    <tr>\n","      <th>OCCUPATION_TYPE</th>\n","      <td>96391</td>\n","      <td>31.35</td>\n","    </tr>\n","    <tr>\n","      <th>EXT_SOURCE_3</th>\n","      <td>60965</td>\n","      <td>19.83</td>\n","    </tr>\n","    <tr>\n","      <th>AMT_REQ_CREDIT_BUREAU_QRT</th>\n","      <td>41519</td>\n","      <td>13.50</td>\n","    </tr>\n","    <tr>\n","      <th>AMT_REQ_CREDIT_BUREAU_YEAR</th>\n","      <td>41519</td>\n","      <td>13.50</td>\n","    </tr>\n","    <tr>\n","      <th>AMT_REQ_CREDIT_BUREAU_WEEK</th>\n","      <td>41519</td>\n","      <td>13.50</td>\n","    </tr>\n","    <tr>\n","      <th>AMT_REQ_CREDIT_BUREAU_DAY</th>\n","      <td>41519</td>\n","      <td>13.50</td>\n","    </tr>\n","    <tr>\n","      <th>AMT_REQ_CREDIT_BUREAU_HOUR</th>\n","      <td>41519</td>\n","      <td>13.50</td>\n","    </tr>\n","    <tr>\n","      <th>AMT_REQ_CREDIT_BUREAU_MON</th>\n","      <td>41519</td>\n","      <td>13.50</td>\n","    </tr>\n","    <tr>\n","      <th>NAME_TYPE_SUITE</th>\n","      <td>1292</td>\n","      <td>0.42</td>\n","    </tr>\n","    <tr>\n","      <th>OBS_30_CNT_SOCIAL_CIRCLE</th>\n","      <td>1021</td>\n","      <td>0.33</td>\n","    </tr>\n","    <tr>\n","      <th>OBS_60_CNT_SOCIAL_CIRCLE</th>\n","      <td>1021</td>\n","      <td>0.33</td>\n","    </tr>\n","    <tr>\n","      <th>DEF_30_CNT_SOCIAL_CIRCLE</th>\n","      <td>1021</td>\n","      <td>0.33</td>\n","    </tr>\n","    <tr>\n","      <th>DEF_60_CNT_SOCIAL_CIRCLE</th>\n","      <td>1021</td>\n","      <td>0.33</td>\n","    </tr>\n","    <tr>\n","      <th>EXT_SOURCE_2</th>\n","      <td>660</td>\n","      <td>0.21</td>\n","    </tr>\n","    <tr>\n","      <th>AMT_GOODS_PRICE</th>\n","      <td>278</td>\n","      <td>0.09</td>\n","    </tr>\n","    <tr>\n","      <th>AMT_ANNUITY</th>\n","      <td>12</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>CNT_FAM_MEMBERS</th>\n","      <td>2</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>DAYS_LAST_PHONE_CHANGE</th>\n","      <td>1</td>\n","      <td>0.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2f24b916-5478-4903-87a2-5d08b6463026')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2f24b916-5478-4903-87a2-5d08b6463026 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2f24b916-5478-4903-87a2-5d08b6463026');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5ce1b336-9f7a-4e6c-9448-e0b0f94355e5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5ce1b336-9f7a-4e6c-9448-e0b0f94355e5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5ce1b336-9f7a-4e6c-9448-e0b0f94355e5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"missing_values_table(df)\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"Missing Values\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 64478,\n        \"min\": 1,\n        \"max\": 153020,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          660,\n          12,\n          153020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Percent Missing (%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20.968584886773975,\n        \"min\": 0.0,\n        \"max\": 49.76,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.09,\n          0.21,\n          49.76\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":12}],"source":["# Cek missing value kembali\n","missing_values_table(df)"]},{"cell_type":"markdown","metadata":{"id":"J0rr-JrmN8Q6"},"source":["Masih terdapat beberapa variabel yang memiliki persentase missing value cukup besar. Penangan yang dilakukan adalah imputasi agar tidak terlalu banyak kehilangan informasi data"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"b7AH7F2DKZ0Y","outputId":"36d4aace-1e47-428c-87c3-dbb23c45d0ef","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1745304699439,"user_tz":-420,"elapsed":349,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Your selected dataframe has 80 columns.\n","There are 26 columns that have missing values.\n","Tipe data kolom 'FLOORSMAX_AVG': float64\n","Tipe data kolom 'FLOORSMAX_MODE': float64\n","Tipe data kolom 'FLOORSMAX_MEDI': float64\n","Tipe data kolom 'YEARS_BEGINEXPLUATATION_MEDI': float64\n","Tipe data kolom 'YEARS_BEGINEXPLUATATION_MODE': float64\n","Tipe data kolom 'YEARS_BEGINEXPLUATATION_AVG': float64\n","Tipe data kolom 'TOTALAREA_MODE': float64\n","Tipe data kolom 'EMERGENCYSTATE_MODE': object\n","Tipe data kolom 'OCCUPATION_TYPE': object\n","Tipe data kolom 'EXT_SOURCE_3': float64\n","Tipe data kolom 'AMT_REQ_CREDIT_BUREAU_QRT': float64\n","Tipe data kolom 'AMT_REQ_CREDIT_BUREAU_YEAR': float64\n","Tipe data kolom 'AMT_REQ_CREDIT_BUREAU_WEEK': float64\n","Tipe data kolom 'AMT_REQ_CREDIT_BUREAU_DAY': float64\n","Tipe data kolom 'AMT_REQ_CREDIT_BUREAU_HOUR': float64\n","Tipe data kolom 'AMT_REQ_CREDIT_BUREAU_MON': float64\n","Tipe data kolom 'NAME_TYPE_SUITE': object\n","Tipe data kolom 'OBS_30_CNT_SOCIAL_CIRCLE': float64\n","Tipe data kolom 'OBS_60_CNT_SOCIAL_CIRCLE': float64\n","Tipe data kolom 'DEF_30_CNT_SOCIAL_CIRCLE': float64\n","Tipe data kolom 'DEF_60_CNT_SOCIAL_CIRCLE': float64\n","Tipe data kolom 'EXT_SOURCE_2': float64\n","Tipe data kolom 'AMT_GOODS_PRICE': float64\n","Tipe data kolom 'AMT_ANNUITY': float64\n","Tipe data kolom 'CNT_FAM_MEMBERS': float64\n","Tipe data kolom 'DAYS_LAST_PHONE_CHANGE': float64\n"]}],"source":["cols_to_check = missing_values_table(df).index\n","\n","for col in cols_to_check:\n","    print(f\"Tipe data kolom '{col}': {df[col].dtype}\")"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"3z-7J2uJKZ0Y","executionInfo":{"status":"ok","timestamp":1745304700172,"user_tz":-420,"elapsed":731,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[],"source":["# Mengisi Missing Values dengan Median (untuk data numerik)\n","for col in df.select_dtypes(include=np.number):\n","    df[col].fillna(df[col].median(), inplace=True)\n","\n","# Mengisi Missing Values dengan Modus (untuk data kategorikal)\n","for col in df.select_dtypes(include='object'):\n","    df[col].fillna(df[col].mode()[0], inplace=True)"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"DjOVUjgtKZ0Y","outputId":"e7e34a31-aed1-4521-ad5a-40265daa418a","colab":{"base_uri":"https://localhost:8080/","height":88},"executionInfo":{"status":"ok","timestamp":1745304700595,"user_tz":-420,"elapsed":421,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Your selected dataframe has 80 columns.\n","There are 0 columns that have missing values.\n"]},{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: [Missing Values, Percent Missing (%)]\n","Index: []"],"text/html":["\n","  <div id=\"df-0d329b08-5ea6-43c7-a013-d25f1df9b36c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Missing Values</th>\n","      <th>Percent Missing (%)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0d329b08-5ea6-43c7-a013-d25f1df9b36c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0d329b08-5ea6-43c7-a013-d25f1df9b36c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0d329b08-5ea6-43c7-a013-d25f1df9b36c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"missing_values_table(df)\",\n  \"rows\": 0,\n  \"fields\": [\n    {\n      \"column\": \"Missing Values\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Percent Missing (%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":15}],"source":["missing_values_table(df)"]},{"cell_type":"code","source":["# # prompt: describ kolom Days employed\n","\n","# import pandas as pd\n","\n","# # ... (your existing code) ...\n","\n","# # Assuming 'DAYS_EMPLOYED' is the column name (adjust if different)\n","# if 'DAYS_EMPLOYED' in df.columns:\n","#     print(\"Description of DAYS_EMPLOYED column:\")\n","#     print(df['DAYS_EMPLOYED'].describe())\n","#     print(\"\\nValue counts:\")\n","#     print(df['DAYS_EMPLOYED'].value_counts())\n","#     # You can add more specific analyses here, such as:\n","#     # - Checking for unusual values (e.g., very large positive numbers)\n","#     # - Plotting a histogram or boxplot to visualize the distribution\n","#     # - Calculating the percentage of 365243 values\n","#     print(f\"\\nPercentage of 365243 in 'DAYS_EMPLOYED': {(df['DAYS_EMPLOYED'] == 365243).sum() / len(df) * 100:.2f}%\")\n","# else:\n","#     print(\"'DAYS_EMPLOYED' column not found in the DataFrame.\")\n"],"metadata":{"id":"QhFdyOIuIoc2","executionInfo":{"status":"ok","timestamp":1745304700598,"user_tz":-420,"elapsed":2,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["df['DAYS_EMPLOYED'].describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":335},"id":"U2VG4gN0I0vL","executionInfo":{"status":"ok","timestamp":1745304700601,"user_tz":-420,"elapsed":2,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}},"outputId":"926cde35-4760-4fba-d697-cdf24495fae2"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    307511.000000\n","mean      63815.045904\n","std      141275.766519\n","min      -17912.000000\n","25%       -2760.000000\n","50%       -1213.000000\n","75%        -289.000000\n","max      365243.000000\n","Name: DAYS_EMPLOYED, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>DAYS_EMPLOYED</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>307511.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>63815.045904</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>141275.766519</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>-17912.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>-2760.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>-1213.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>-289.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>365243.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"wMtMxO6gN8Q_"},"source":["Jika dilihat nilai maksimum pada DAYS_EMPLOYED, maka terlihat bahwa terdapat kejanggalan pada nilai maksimumnya, yaitu ilai maksimumnya (selain positif) bernilai sekitar 1000 Tahun. Coba cek kejanggalannya secara menyeluruh untuk DAYS_EMPLOYED."]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p3-Q9J6QN8RK","outputId":"8693fbec-5c27-4a4b-eee1-32493c458b4f","executionInfo":{"status":"ok","timestamp":1745304700684,"user_tz":-420,"elapsed":74,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Non-anomalies default adalah 8.66% dari data pinjaman\n","Anomalies default adalah 5.40% dari data pinjaman\n","Terdapat 55374 anomali DAYS_EMPLOYED\n"]}],"source":["anom = df[df['DAYS_EMPLOYED'] == 365243]\n","non_anom = df[df['DAYS_EMPLOYED'] != 365243]\n","print('Non-anomalies default adalah %0.2f%% dari data pinjaman' % (100 * non_anom['TARGET'].mean()))\n","print('Anomalies default adalah %0.2f%% dari data pinjaman' % (100 * anom['TARGET'].mean()))\n","print('Terdapat %d anomali DAYS_EMPLOYED' % len(anom))"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"id":"gm9t33wwN8RL","outputId":"cee217ff-09d4-4f14-88f9-b0f120ce58f4","executionInfo":{"status":"ok","timestamp":1745304701104,"user_tz":-420,"elapsed":418,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'Days Employment')"]},"metadata":{},"execution_count":19},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Buat kolom anomali\n","df['DAYS_EMPLOYED_ANOM'] = df[\"DAYS_EMPLOYED\"] == 365243\n","\n","# Ganti anomali dengan NaN\n","df['DAYS_EMPLOYED'].replace({365243: np.nan}, inplace = True)\n","\n","df['DAYS_EMPLOYED'].plot.hist(title = 'Days Employment Histogram');\n","plt.xlabel('Days Employment')"]},{"cell_type":"code","source":["# Mengisi Missing Values dengan Median (untuk data numerik)\n","for col in df.select_dtypes(include=np.number):\n","    df[col].fillna(df[col].median(), inplace=True)\n","\n","# Mengisi Missing Values dengan Modus (untuk data kategorikal)\n","for col in df.select_dtypes(include='object'):\n","    df[col].fillna(df[col].mode()[0], inplace=True)"],"metadata":{"id":"JzwYRNMLVzKR","executionInfo":{"status":"ok","timestamp":1745304701821,"user_tz":-420,"elapsed":718,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["# Encoding all object type variables\n","from sklearn.preprocessing import LabelEncoder\n","object_cols = df.select_dtypes(include='object').columns\n","for col in object_cols:\n","    le = LabelEncoder()\n","    df[col] = le.fit_transform(df[col])\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zn-X-cyAseoj","outputId":"596be2aa-b0ee-4080-b18d-aa5d1c2a4c7d","executionInfo":{"status":"ok","timestamp":1745304702537,"user_tz":-420,"elapsed":713,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 307511 entries, 0 to 307510\n","Data columns (total 81 columns):\n"," #   Column                        Non-Null Count   Dtype  \n","---  ------                        --------------   -----  \n"," 0   TARGET                        307511 non-null  int64  \n"," 1   NAME_CONTRACT_TYPE            307511 non-null  int64  \n"," 2   CODE_GENDER                   307511 non-null  int64  \n"," 3   FLAG_OWN_CAR                  307511 non-null  int64  \n"," 4   FLAG_OWN_REALTY               307511 non-null  int64  \n"," 5   CNT_CHILDREN                  307511 non-null  int64  \n"," 6   AMT_INCOME_TOTAL              307511 non-null  float64\n"," 7   AMT_CREDIT                    307511 non-null  float64\n"," 8   AMT_ANNUITY                   307511 non-null  float64\n"," 9   AMT_GOODS_PRICE               307511 non-null  float64\n"," 10  NAME_TYPE_SUITE               307511 non-null  int64  \n"," 11  NAME_INCOME_TYPE              307511 non-null  int64  \n"," 12  NAME_EDUCATION_TYPE           307511 non-null  int64  \n"," 13  NAME_FAMILY_STATUS            307511 non-null  int64  \n"," 14  NAME_HOUSING_TYPE             307511 non-null  int64  \n"," 15  REGION_POPULATION_RELATIVE    307511 non-null  float64\n"," 16  DAYS_BIRTH                    307511 non-null  int64  \n"," 17  DAYS_EMPLOYED                 307511 non-null  float64\n"," 18  DAYS_REGISTRATION             307511 non-null  float64\n"," 19  DAYS_ID_PUBLISH               307511 non-null  int64  \n"," 20  FLAG_MOBIL                    307511 non-null  int64  \n"," 21  FLAG_EMP_PHONE                307511 non-null  int64  \n"," 22  FLAG_WORK_PHONE               307511 non-null  int64  \n"," 23  FLAG_CONT_MOBILE              307511 non-null  int64  \n"," 24  FLAG_PHONE                    307511 non-null  int64  \n"," 25  FLAG_EMAIL                    307511 non-null  int64  \n"," 26  OCCUPATION_TYPE               307511 non-null  int64  \n"," 27  CNT_FAM_MEMBERS               307511 non-null  float64\n"," 28  REGION_RATING_CLIENT          307511 non-null  int64  \n"," 29  REGION_RATING_CLIENT_W_CITY   307511 non-null  int64  \n"," 30  WEEKDAY_APPR_PROCESS_START    307511 non-null  int64  \n"," 31  HOUR_APPR_PROCESS_START       307511 non-null  int64  \n"," 32  REG_REGION_NOT_LIVE_REGION    307511 non-null  int64  \n"," 33  REG_REGION_NOT_WORK_REGION    307511 non-null  int64  \n"," 34  LIVE_REGION_NOT_WORK_REGION   307511 non-null  int64  \n"," 35  REG_CITY_NOT_LIVE_CITY        307511 non-null  int64  \n"," 36  REG_CITY_NOT_WORK_CITY        307511 non-null  int64  \n"," 37  LIVE_CITY_NOT_WORK_CITY       307511 non-null  int64  \n"," 38  ORGANIZATION_TYPE             307511 non-null  int64  \n"," 39  EXT_SOURCE_2                  307511 non-null  float64\n"," 40  EXT_SOURCE_3                  307511 non-null  float64\n"," 41  YEARS_BEGINEXPLUATATION_AVG   307511 non-null  float64\n"," 42  FLOORSMAX_AVG                 307511 non-null  float64\n"," 43  YEARS_BEGINEXPLUATATION_MODE  307511 non-null  float64\n"," 44  FLOORSMAX_MODE                307511 non-null  float64\n"," 45  YEARS_BEGINEXPLUATATION_MEDI  307511 non-null  float64\n"," 46  FLOORSMAX_MEDI                307511 non-null  float64\n"," 47  TOTALAREA_MODE                307511 non-null  float64\n"," 48  EMERGENCYSTATE_MODE           307511 non-null  int64  \n"," 49  OBS_30_CNT_SOCIAL_CIRCLE      307511 non-null  float64\n"," 50  DEF_30_CNT_SOCIAL_CIRCLE      307511 non-null  float64\n"," 51  OBS_60_CNT_SOCIAL_CIRCLE      307511 non-null  float64\n"," 52  DEF_60_CNT_SOCIAL_CIRCLE      307511 non-null  float64\n"," 53  DAYS_LAST_PHONE_CHANGE        307511 non-null  float64\n"," 54  FLAG_DOCUMENT_2               307511 non-null  int64  \n"," 55  FLAG_DOCUMENT_3               307511 non-null  int64  \n"," 56  FLAG_DOCUMENT_4               307511 non-null  int64  \n"," 57  FLAG_DOCUMENT_5               307511 non-null  int64  \n"," 58  FLAG_DOCUMENT_6               307511 non-null  int64  \n"," 59  FLAG_DOCUMENT_7               307511 non-null  int64  \n"," 60  FLAG_DOCUMENT_8               307511 non-null  int64  \n"," 61  FLAG_DOCUMENT_9               307511 non-null  int64  \n"," 62  FLAG_DOCUMENT_10              307511 non-null  int64  \n"," 63  FLAG_DOCUMENT_11              307511 non-null  int64  \n"," 64  FLAG_DOCUMENT_12              307511 non-null  int64  \n"," 65  FLAG_DOCUMENT_13              307511 non-null  int64  \n"," 66  FLAG_DOCUMENT_14              307511 non-null  int64  \n"," 67  FLAG_DOCUMENT_15              307511 non-null  int64  \n"," 68  FLAG_DOCUMENT_16              307511 non-null  int64  \n"," 69  FLAG_DOCUMENT_17              307511 non-null  int64  \n"," 70  FLAG_DOCUMENT_18              307511 non-null  int64  \n"," 71  FLAG_DOCUMENT_19              307511 non-null  int64  \n"," 72  FLAG_DOCUMENT_20              307511 non-null  int64  \n"," 73  FLAG_DOCUMENT_21              307511 non-null  int64  \n"," 74  AMT_REQ_CREDIT_BUREAU_HOUR    307511 non-null  float64\n"," 75  AMT_REQ_CREDIT_BUREAU_DAY     307511 non-null  float64\n"," 76  AMT_REQ_CREDIT_BUREAU_WEEK    307511 non-null  float64\n"," 77  AMT_REQ_CREDIT_BUREAU_MON     307511 non-null  float64\n"," 78  AMT_REQ_CREDIT_BUREAU_QRT     307511 non-null  float64\n"," 79  AMT_REQ_CREDIT_BUREAU_YEAR    307511 non-null  float64\n"," 80  DAYS_EMPLOYED_ANOM            307511 non-null  bool   \n","dtypes: bool(1), float64(28), int64(52)\n","memory usage: 188.0 MB\n"]}]},{"cell_type":"code","source":["# prompt: print most correlation positif & negatid dengan TARGET berurutan dari yang terbesar\n","\n","correlations = df.corr()['TARGET'].sort_values()\n","\n","# Remove the 'TARGET' index from the 'correlations' Series\n","correlation_with_label = correlations.drop(index=['TARGET'])\n","\n","# Display most negative correlations\n","print(\"Most Negative Correlations:\\n\", correlations.head(10))\n","\n","# Display most positive correlations\n","print(\"\\nMost Positive Correlations:\\n\", correlation_with_label.tail(10))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m4VWjlY7RT9N","executionInfo":{"status":"ok","timestamp":1745304708383,"user_tz":-420,"elapsed":5845,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}},"outputId":"80b6507c-2fdc-4326-b753-b904360ea49f"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Most Negative Correlations:\n"," EXT_SOURCE_2                 -0.160295\n","EXT_SOURCE_3                 -0.155892\n","DAYS_EMPLOYED_ANOM           -0.045987\n","AMT_GOODS_PRICE              -0.039623\n","FLOORSMAX_AVG                -0.039385\n","FLOORSMAX_MEDI               -0.039157\n","FLOORSMAX_MODE               -0.038377\n","REGION_POPULATION_RELATIVE   -0.037227\n","NAME_CONTRACT_TYPE           -0.030896\n","ORGANIZATION_TYPE            -0.030765\n","Name: TARGET, dtype: float64\n","\n","Most Positive Correlations:\n"," NAME_INCOME_TYPE               0.046829\n","REG_CITY_NOT_WORK_CITY         0.050994\n","DAYS_ID_PUBLISH                0.051457\n","CODE_GENDER                    0.054692\n","NAME_EDUCATION_TYPE            0.054699\n","DAYS_LAST_PHONE_CHANGE         0.055218\n","REGION_RATING_CLIENT           0.058899\n","REGION_RATING_CLIENT_W_CITY    0.060893\n","DAYS_EMPLOYED                  0.063368\n","DAYS_BIRTH                     0.078239\n","Name: TARGET, dtype: float64\n"]}]},{"cell_type":"code","source":["correlations"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":458},"id":"WIcU4AuxSba-","executionInfo":{"status":"ok","timestamp":1745304708388,"user_tz":-420,"elapsed":6,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}},"outputId":"8b11a64b-d9bf-49c4-e473-c19b27582d25"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["EXT_SOURCE_2                  -0.160295\n","EXT_SOURCE_3                  -0.155892\n","DAYS_EMPLOYED_ANOM            -0.045987\n","AMT_GOODS_PRICE               -0.039623\n","FLOORSMAX_AVG                 -0.039385\n","                                 ...   \n","REGION_RATING_CLIENT           0.058899\n","REGION_RATING_CLIENT_W_CITY    0.060893\n","DAYS_EMPLOYED                  0.063368\n","DAYS_BIRTH                     0.078239\n","TARGET                         1.000000\n","Name: TARGET, Length: 81, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>TARGET</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>EXT_SOURCE_2</th>\n","      <td>-0.160295</td>\n","    </tr>\n","    <tr>\n","      <th>EXT_SOURCE_3</th>\n","      <td>-0.155892</td>\n","    </tr>\n","    <tr>\n","      <th>DAYS_EMPLOYED_ANOM</th>\n","      <td>-0.045987</td>\n","    </tr>\n","    <tr>\n","      <th>AMT_GOODS_PRICE</th>\n","      <td>-0.039623</td>\n","    </tr>\n","    <tr>\n","      <th>FLOORSMAX_AVG</th>\n","      <td>-0.039385</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>REGION_RATING_CLIENT</th>\n","      <td>0.058899</td>\n","    </tr>\n","    <tr>\n","      <th>REGION_RATING_CLIENT_W_CITY</th>\n","      <td>0.060893</td>\n","    </tr>\n","    <tr>\n","      <th>DAYS_EMPLOYED</th>\n","      <td>0.063368</td>\n","    </tr>\n","    <tr>\n","      <th>DAYS_BIRTH</th>\n","      <td>0.078239</td>\n","    </tr>\n","    <tr>\n","      <th>TARGET</th>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>81 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XqOg57df73gl","outputId":"ebe62e69-a52d-4455-9f1d-00dce0ce163e","executionInfo":{"status":"ok","timestamp":1745304708394,"user_tz":-420,"elapsed":6,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['EXT_SOURCE_2', 'EXT_SOURCE_3', 'DAYS_EMPLOYED_ANOM', 'AMT_GOODS_PRICE',\n","       'FLOORSMAX_AVG', 'FLOORSMAX_MEDI', 'FLOORSMAX_MODE',\n","       'REGION_POPULATION_RELATIVE', 'NAME_CONTRACT_TYPE', 'ORGANIZATION_TYPE',\n","       'AMT_CREDIT', 'TOTALAREA_MODE', 'FLAG_DOCUMENT_6',\n","       'HOUR_APPR_PROCESS_START', 'FLAG_PHONE'],\n","      dtype='object')"]},"metadata":{},"execution_count":24}],"source":["correlation_with_label.index[:15] # To get the names of top 15 correlated columns as an Index object"]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":488},"id":"R4UeJKF48VHL","outputId":"d9ecd233-6a95-4866-9335-fb70ee96fad7","executionInfo":{"status":"ok","timestamp":1745304708494,"user_tz":-420,"elapsed":100,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                               count           mean            std  \\\n","EXT_SOURCE_2                307511.0       0.514503       0.190870   \n","EXT_SOURCE_3                307511.0       0.515695       0.174736   \n","AMT_GOODS_PRICE             307511.0  538316.294367  369288.982246   \n","FLOORSMAX_AVG               307511.0       0.196633       0.106761   \n","FLOORSMAX_MEDI              307511.0       0.196440       0.106998   \n","FLOORSMAX_MODE              307511.0       0.194641       0.105588   \n","REGION_POPULATION_RELATIVE  307511.0       0.020868       0.013831   \n","NAME_CONTRACT_TYPE          307511.0       0.095213       0.293509   \n","ORGANIZATION_TYPE           307511.0      29.450429      20.463558   \n","AMT_CREDIT                  307511.0  599025.999706  402490.776996   \n","TOTALAREA_MODE              307511.0       0.086258       0.079110   \n","FLAG_DOCUMENT_6             307511.0       0.088055       0.283376   \n","HOUR_APPR_PROCESS_START     307511.0      12.063419       3.265832   \n","FLAG_PHONE                  307511.0       0.281066       0.449521   \n","\n","                                     min            25%            50%  \\\n","EXT_SOURCE_2                8.173617e-08       0.392974       0.565961   \n","EXT_SOURCE_3                5.272652e-04       0.417100       0.535276   \n","AMT_GOODS_PRICE             4.050000e+04  238500.000000  450000.000000   \n","FLOORSMAX_AVG               0.000000e+00       0.166700       0.166700   \n","FLOORSMAX_MEDI              0.000000e+00       0.166700       0.166700   \n","FLOORSMAX_MODE              0.000000e+00       0.166700       0.166700   \n","REGION_POPULATION_RELATIVE  2.900000e-04       0.010006       0.018850   \n","NAME_CONTRACT_TYPE          0.000000e+00       0.000000       0.000000   \n","ORGANIZATION_TYPE           0.000000e+00       5.000000      33.000000   \n","AMT_CREDIT                  4.500000e+04  270000.000000  513531.000000   \n","TOTALAREA_MODE              0.000000e+00       0.067000       0.068800   \n","FLAG_DOCUMENT_6             0.000000e+00       0.000000       0.000000   \n","HOUR_APPR_PROCESS_START     0.000000e+00      10.000000      12.000000   \n","FLAG_PHONE                  0.000000e+00       0.000000       0.000000   \n","\n","                                      75%           max  \n","EXT_SOURCE_2                     0.663422  8.549997e-01  \n","EXT_SOURCE_3                     0.636376  8.960095e-01  \n","AMT_GOODS_PRICE             679500.000000  4.050000e+06  \n","FLOORSMAX_AVG                    0.166700  1.000000e+00  \n","FLOORSMAX_MEDI                   0.166700  1.000000e+00  \n","FLOORSMAX_MODE                   0.166700  1.000000e+00  \n","REGION_POPULATION_RELATIVE       0.028663  7.250800e-02  \n","NAME_CONTRACT_TYPE               0.000000  1.000000e+00  \n","ORGANIZATION_TYPE               47.000000  5.700000e+01  \n","AMT_CREDIT                  808650.000000  4.050000e+06  \n","TOTALAREA_MODE                   0.070300  1.000000e+00  \n","FLAG_DOCUMENT_6                  0.000000  1.000000e+00  \n","HOUR_APPR_PROCESS_START         14.000000  2.300000e+01  \n","FLAG_PHONE                       1.000000  1.000000e+00  "],"text/html":["\n","  <div id=\"df-984049f7-46e8-4e1b-974d-d83febe45415\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>mean</th>\n","      <th>std</th>\n","      <th>min</th>\n","      <th>25%</th>\n","      <th>50%</th>\n","      <th>75%</th>\n","      <th>max</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>EXT_SOURCE_2</th>\n","      <td>307511.0</td>\n","      <td>0.514503</td>\n","      <td>0.190870</td>\n","      <td>8.173617e-08</td>\n","      <td>0.392974</td>\n","      <td>0.565961</td>\n","      <td>0.663422</td>\n","      <td>8.549997e-01</td>\n","    </tr>\n","    <tr>\n","      <th>EXT_SOURCE_3</th>\n","      <td>307511.0</td>\n","      <td>0.515695</td>\n","      <td>0.174736</td>\n","      <td>5.272652e-04</td>\n","      <td>0.417100</td>\n","      <td>0.535276</td>\n","      <td>0.636376</td>\n","      <td>8.960095e-01</td>\n","    </tr>\n","    <tr>\n","      <th>AMT_GOODS_PRICE</th>\n","      <td>307511.0</td>\n","      <td>538316.294367</td>\n","      <td>369288.982246</td>\n","      <td>4.050000e+04</td>\n","      <td>238500.000000</td>\n","      <td>450000.000000</td>\n","      <td>679500.000000</td>\n","      <td>4.050000e+06</td>\n","    </tr>\n","    <tr>\n","      <th>FLOORSMAX_AVG</th>\n","      <td>307511.0</td>\n","      <td>0.196633</td>\n","      <td>0.106761</td>\n","      <td>0.000000e+00</td>\n","      <td>0.166700</td>\n","      <td>0.166700</td>\n","      <td>0.166700</td>\n","      <td>1.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>FLOORSMAX_MEDI</th>\n","      <td>307511.0</td>\n","      <td>0.196440</td>\n","      <td>0.106998</td>\n","      <td>0.000000e+00</td>\n","      <td>0.166700</td>\n","      <td>0.166700</td>\n","      <td>0.166700</td>\n","      <td>1.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>FLOORSMAX_MODE</th>\n","      <td>307511.0</td>\n","      <td>0.194641</td>\n","      <td>0.105588</td>\n","      <td>0.000000e+00</td>\n","      <td>0.166700</td>\n","      <td>0.166700</td>\n","      <td>0.166700</td>\n","      <td>1.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>REGION_POPULATION_RELATIVE</th>\n","      <td>307511.0</td>\n","      <td>0.020868</td>\n","      <td>0.013831</td>\n","      <td>2.900000e-04</td>\n","      <td>0.010006</td>\n","      <td>0.018850</td>\n","      <td>0.028663</td>\n","      <td>7.250800e-02</td>\n","    </tr>\n","    <tr>\n","      <th>NAME_CONTRACT_TYPE</th>\n","      <td>307511.0</td>\n","      <td>0.095213</td>\n","      <td>0.293509</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>ORGANIZATION_TYPE</th>\n","      <td>307511.0</td>\n","      <td>29.450429</td>\n","      <td>20.463558</td>\n","      <td>0.000000e+00</td>\n","      <td>5.000000</td>\n","      <td>33.000000</td>\n","      <td>47.000000</td>\n","      <td>5.700000e+01</td>\n","    </tr>\n","    <tr>\n","      <th>AMT_CREDIT</th>\n","      <td>307511.0</td>\n","      <td>599025.999706</td>\n","      <td>402490.776996</td>\n","      <td>4.500000e+04</td>\n","      <td>270000.000000</td>\n","      <td>513531.000000</td>\n","      <td>808650.000000</td>\n","      <td>4.050000e+06</td>\n","    </tr>\n","    <tr>\n","      <th>TOTALAREA_MODE</th>\n","      <td>307511.0</td>\n","      <td>0.086258</td>\n","      <td>0.079110</td>\n","      <td>0.000000e+00</td>\n","      <td>0.067000</td>\n","      <td>0.068800</td>\n","      <td>0.070300</td>\n","      <td>1.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>FLAG_DOCUMENT_6</th>\n","      <td>307511.0</td>\n","      <td>0.088055</td>\n","      <td>0.283376</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>HOUR_APPR_PROCESS_START</th>\n","      <td>307511.0</td>\n","      <td>12.063419</td>\n","      <td>3.265832</td>\n","      <td>0.000000e+00</td>\n","      <td>10.000000</td>\n","      <td>12.000000</td>\n","      <td>14.000000</td>\n","      <td>2.300000e+01</td>\n","    </tr>\n","    <tr>\n","      <th>FLAG_PHONE</th>\n","      <td>307511.0</td>\n","      <td>0.281066</td>\n","      <td>0.449521</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000e+00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-984049f7-46e8-4e1b-974d-d83febe45415')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-984049f7-46e8-4e1b-974d-d83febe45415 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-984049f7-46e8-4e1b-974d-d83febe45415');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-41f55997-4ed9-4d0c-92bb-204d3f2359e2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-41f55997-4ed9-4d0c-92bb-204d3f2359e2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-41f55997-4ed9-4d0c-92bb-204d3f2359e2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[correlation_with_label\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 307511.0,\n        \"max\": 307511.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          307511.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 206846.88347241184,\n        \"min\": 0.020868112057780035,\n        \"max\": 599025.9997057016,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          599025.9997057016\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 140281.1362368201,\n        \"min\": 0.013831280122699869,\n        \"max\": 402490.776995946,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          402490.776995946\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15549.151042200085,\n        \"min\": 0.0,\n        \"max\": 45000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          8.173616518884397e-08\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 92533.40904615197,\n        \"min\": 0.0,\n        \"max\": 270000.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.067\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 175388.34910010383,\n        \"min\": 0.0,\n        \"max\": 513531.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.0688\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 271383.4159656341,\n        \"min\": 0.0,\n        \"max\": 808650.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1470700.2165451124,\n        \"min\": 0.072508,\n        \"max\": 4050000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.8549996664047012\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":25}],"source":["df[correlation_with_label.index[:15]].describe().T"]},{"cell_type":"markdown","metadata":{"id":"_x-c4iEVN8Q9"},"source":["Angka-angka di kolom DAYS_BIRTH adalah negatif karena dicatat berdasarkan aplikasi pinjaman saat ini. Untuk melihat statistik DAYS_BIRTH dalam beberapa tahun, kita dapat mengalikannya dengan -1 dan membaginya dengan jumlah hari dalam setahun."]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":335},"id":"ttpeblmFN8Q9","outputId":"d25ce12a-f69c-44a7-bacf-0dabd023730b","executionInfo":{"status":"ok","timestamp":1745304708648,"user_tz":-420,"elapsed":145,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    307511.000000\n","mean         43.936973\n","std          11.956133\n","min          20.517808\n","25%          34.008219\n","50%          43.150685\n","75%          53.923288\n","max          69.120548\n","Name: DAYS_BIRTH, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>DAYS_BIRTH</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>307511.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>43.936973</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>11.956133</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>20.517808</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>34.008219</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>43.150685</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>53.923288</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>69.120548</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":26}],"source":["(df['DAYS_BIRTH'] / -365).describe()"]},{"cell_type":"markdown","metadata":{"id":"OTvpfD8bN8Q-"},"source":["Tidak terdapat kejanggalan dalam statistik umur. Nilai-nilainya masih dalam batas normal.\\\n","Korelasinya positif, tetapi nilai fitur ini sebenarnya negatif, yang berarti bahwa seiring bertambahnya usia klien, mereka cenderung tidak membayar pinjamannya. Hal tersebut nampaknya kurang sesuai, jsehingga akan diambil nilai absolut dari fitur tersebut dan korelasinya akan negatif."]},{"cell_type":"code","execution_count":27,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sZcNqAh4N8Q-","outputId":"b5f5a782-5d3f-45d6-c064-83caa3b359dd","executionInfo":{"status":"ok","timestamp":1745304708652,"user_tz":-420,"elapsed":4,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["np.float64(-0.07823930830982694)"]},"metadata":{},"execution_count":27}],"source":["# Korelasi antara DAYS_BIRTH positif dan target\n","df['DAYS_BIRTH'] = abs(df['DAYS_BIRTH'])\n","df['DAYS_BIRTH'].corr(df['TARGET'])"]},{"cell_type":"markdown","metadata":{"id":"5Kibs9_tN8Q-"},"source":["Seiring bertambahnya usia klien, ada korelasi linier negatif dengan target yang berarti bahwa seiring bertambahnya usia klien, mereka cenderung lebih sering membayar pinjamannya tepat waktu."]},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jj9JPsvp89M1","outputId":"40ea98df-b59b-4c86-95a6-c9436459b061","executionInfo":{"status":"ok","timestamp":1745304708656,"user_tz":-420,"elapsed":4,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['NAME_HOUSING_TYPE', 'DAYS_REGISTRATION', 'FLAG_DOCUMENT_3',\n","       'REG_CITY_NOT_LIVE_CITY', 'FLAG_EMP_PHONE', 'NAME_INCOME_TYPE',\n","       'REG_CITY_NOT_WORK_CITY', 'DAYS_ID_PUBLISH', 'CODE_GENDER',\n","       'NAME_EDUCATION_TYPE', 'DAYS_LAST_PHONE_CHANGE', 'REGION_RATING_CLIENT',\n","       'REGION_RATING_CLIENT_W_CITY', 'DAYS_EMPLOYED', 'DAYS_BIRTH'],\n","      dtype='object')"]},"metadata":{},"execution_count":28}],"source":["correlation_with_label.index[-15:]"]},{"cell_type":"code","execution_count":29,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":519},"id":"y29es81m9e_C","outputId":"501f4695-a589-433f-b9d3-449ea20c1f19","scrolled":true,"executionInfo":{"status":"ok","timestamp":1745304708722,"user_tz":-420,"elapsed":65,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                count          mean          std      min  \\\n","NAME_HOUSING_TYPE            307511.0      1.290390     0.951168      0.0   \n","DAYS_REGISTRATION            307511.0  -4986.120328  3522.886321 -24672.0   \n","FLAG_DOCUMENT_3              307511.0      0.710023     0.453752      0.0   \n","REG_CITY_NOT_LIVE_CITY       307511.0      0.078173     0.268444      0.0   \n","FLAG_EMP_PHONE               307511.0      0.819889     0.384280      0.0   \n","NAME_INCOME_TYPE             307511.0      4.670288     2.544525      0.0   \n","REG_CITY_NOT_WORK_CITY       307511.0      0.230454     0.421124      0.0   \n","DAYS_ID_PUBLISH              307511.0  -2994.202373  1509.450419  -7197.0   \n","CODE_GENDER                  307511.0      0.341669     0.474297      0.0   \n","NAME_EDUCATION_TYPE          307511.0      3.188273     1.298753      0.0   \n","DAYS_LAST_PHONE_CHANGE       307511.0   -962.858119   826.807226  -4292.0   \n","REGION_RATING_CLIENT         307511.0      2.052463     0.509034      1.0   \n","REGION_RATING_CLIENT_W_CITY  307511.0      2.031521     0.502737      1.0   \n","DAYS_EMPLOYED                307511.0  -2251.606131  2136.193492 -17912.0   \n","DAYS_BIRTH                   307511.0  16036.995067  4363.988632   7489.0   \n","\n","                                 25%      50%      75%      max  \n","NAME_HOUSING_TYPE                1.0      1.0      1.0      5.0  \n","DAYS_REGISTRATION            -7479.5  -4504.0  -2010.0      0.0  \n","FLAG_DOCUMENT_3                  0.0      1.0      1.0      1.0  \n","REG_CITY_NOT_LIVE_CITY           0.0      0.0      0.0      1.0  \n","FLAG_EMP_PHONE                   1.0      1.0      1.0      1.0  \n","NAME_INCOME_TYPE                 3.0      7.0      7.0      7.0  \n","REG_CITY_NOT_WORK_CITY           0.0      0.0      0.0      1.0  \n","DAYS_ID_PUBLISH              -4299.0  -3254.0  -1720.0      0.0  \n","CODE_GENDER                      0.0      0.0      1.0      2.0  \n","NAME_EDUCATION_TYPE              2.0      4.0      4.0      4.0  \n","DAYS_LAST_PHONE_CHANGE       -1570.0   -757.0   -274.0      0.0  \n","REGION_RATING_CLIENT             2.0      2.0      2.0      3.0  \n","REGION_RATING_CLIENT_W_CITY      2.0      2.0      2.0      3.0  \n","DAYS_EMPLOYED                -2760.0  -1648.0   -933.0      0.0  \n","DAYS_BIRTH                   12413.0  15750.0  19682.0  25229.0  "],"text/html":["\n","  <div id=\"df-865ff1ce-034f-4533-90c0-139f1844c296\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>mean</th>\n","      <th>std</th>\n","      <th>min</th>\n","      <th>25%</th>\n","      <th>50%</th>\n","      <th>75%</th>\n","      <th>max</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>NAME_HOUSING_TYPE</th>\n","      <td>307511.0</td>\n","      <td>1.290390</td>\n","      <td>0.951168</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>DAYS_REGISTRATION</th>\n","      <td>307511.0</td>\n","      <td>-4986.120328</td>\n","      <td>3522.886321</td>\n","      <td>-24672.0</td>\n","      <td>-7479.5</td>\n","      <td>-4504.0</td>\n","      <td>-2010.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>FLAG_DOCUMENT_3</th>\n","      <td>307511.0</td>\n","      <td>0.710023</td>\n","      <td>0.453752</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>REG_CITY_NOT_LIVE_CITY</th>\n","      <td>307511.0</td>\n","      <td>0.078173</td>\n","      <td>0.268444</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>FLAG_EMP_PHONE</th>\n","      <td>307511.0</td>\n","      <td>0.819889</td>\n","      <td>0.384280</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>NAME_INCOME_TYPE</th>\n","      <td>307511.0</td>\n","      <td>4.670288</td>\n","      <td>2.544525</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>7.0</td>\n","      <td>7.0</td>\n","      <td>7.0</td>\n","    </tr>\n","    <tr>\n","      <th>REG_CITY_NOT_WORK_CITY</th>\n","      <td>307511.0</td>\n","      <td>0.230454</td>\n","      <td>0.421124</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>DAYS_ID_PUBLISH</th>\n","      <td>307511.0</td>\n","      <td>-2994.202373</td>\n","      <td>1509.450419</td>\n","      <td>-7197.0</td>\n","      <td>-4299.0</td>\n","      <td>-3254.0</td>\n","      <td>-1720.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>CODE_GENDER</th>\n","      <td>307511.0</td>\n","      <td>0.341669</td>\n","      <td>0.474297</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>NAME_EDUCATION_TYPE</th>\n","      <td>307511.0</td>\n","      <td>3.188273</td>\n","      <td>1.298753</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>DAYS_LAST_PHONE_CHANGE</th>\n","      <td>307511.0</td>\n","      <td>-962.858119</td>\n","      <td>826.807226</td>\n","      <td>-4292.0</td>\n","      <td>-1570.0</td>\n","      <td>-757.0</td>\n","      <td>-274.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>REGION_RATING_CLIENT</th>\n","      <td>307511.0</td>\n","      <td>2.052463</td>\n","      <td>0.509034</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>REGION_RATING_CLIENT_W_CITY</th>\n","      <td>307511.0</td>\n","      <td>2.031521</td>\n","      <td>0.502737</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>DAYS_EMPLOYED</th>\n","      <td>307511.0</td>\n","      <td>-2251.606131</td>\n","      <td>2136.193492</td>\n","      <td>-17912.0</td>\n","      <td>-2760.0</td>\n","      <td>-1648.0</td>\n","      <td>-933.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>DAYS_BIRTH</th>\n","      <td>307511.0</td>\n","      <td>16036.995067</td>\n","      <td>4363.988632</td>\n","      <td>7489.0</td>\n","      <td>12413.0</td>\n","      <td>15750.0</td>\n","      <td>19682.0</td>\n","      <td>25229.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-865ff1ce-034f-4533-90c0-139f1844c296')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-865ff1ce-034f-4533-90c0-139f1844c296 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-865ff1ce-034f-4533-90c0-139f1844c296');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-41b794b0-465e-4a71-ae99-33775ad917aa\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-41b794b0-465e-4a71-ae99-33775ad917aa')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-41b794b0-465e-4a71-ae99-33775ad917aa button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[correlation_with_label\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 307511.0,\n        \"max\": 307511.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          307511.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4593.750606253613,\n        \"min\": -4986.120327538419,\n        \"max\": 16036.995066843137,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          3.188272939829795\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1433.8785574062836,\n        \"min\": 0.26844377237329226,\n        \"max\": 4363.988631785526,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          1.2987534765052162\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8067.534920608529,\n        \"min\": -24672.0,\n        \"max\": 7489.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4120.37079844359,\n        \"min\": -7479.5,\n        \"max\": 12413.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          -2760.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4473.187257213277,\n        \"min\": -4504.0,\n        \"max\": 15750.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          -1648.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5215.317775096556,\n        \"min\": -2010.0,\n        \"max\": 19682.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          -933.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6513.583720634463,\n        \"min\": 0.0,\n        \"max\": 25229.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":29}],"source":["df[correlation_with_label.index[-15:]].describe().T"]},{"cell_type":"code","source":["# # Combined Data\n","# df_combined = pd.concat([df1, df2], axis=0)"],"metadata":{"id":"GWUgIUuuKG6o","executionInfo":{"status":"ok","timestamp":1745304708726,"user_tz":-420,"elapsed":3,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","execution_count":31,"metadata":{"id":"RJMEpDB6KZ0Y","executionInfo":{"status":"ok","timestamp":1745304708757,"user_tz":-420,"elapsed":29,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[],"source":["# numerical_cols = df.select_dtypes(include=np.number).columns\n","\n","# Q1 = df[numerical_cols].quantile(0.25)\n","# Q3 = df[numerical_cols].quantile(0.75)\n","# IQR = Q3 - Q1\n","\n","# upper_bound = Q3 + 1.5 * IQR\n","# lower_bound = Q1 - 1.5 * IQR\n","\n","# outliers = (df[numerical_cols] < lower_bound) | (df[numerical_cols] > upper_bound)\n","\n","# outliers_per_col = outliers.sum()\n","\n","# # Filter kolom dengan outlier > 0\n","# cols_with_outliers = outliers_per_col[outliers_per_col > 0]\n","\n","# # Tampilkan statistik outlier hanya untuk kolom dengan outlier > 0\n","# if not cols_with_outliers.empty:\n","#     print(\"Statistik Outlier (hanya kolom dengan outlier > 0):\")\n","#     print(cols_with_outliers)\n","# else:\n","#     print(\"Tidak ada kolom yang memiliki outlier.\")"]},{"cell_type":"code","execution_count":32,"metadata":{"id":"DBDoIbWmKZ0Y","executionInfo":{"status":"ok","timestamp":1745304708768,"user_tz":-420,"elapsed":12,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[],"source":["# cols_with_outliers.index"]},{"cell_type":"code","execution_count":33,"metadata":{"id":"rD4zaJDJKZ0Y","executionInfo":{"status":"ok","timestamp":1745304708770,"user_tz":-420,"elapsed":9,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[],"source":["# numerical_cols = df_ap_train.select_dtypes(include=np.number).columns\n","\n","# # Hitung batas atas dan bawah\n","# upper_bounds = {}\n","# lower_bounds = {}\n","# for col in numerical_cols:\n","#     upper_bounds[col] = df_ap_train[col].quantile(0.95)\n","#     lower_bounds[col] = df_ap_train[col].quantile(0.05)\n","\n","# # Fungsi winsorizing\n","# def winsorize_col(df, col, lower_bound, upper_bound):\n","#     df[col] = np.where(df[col] < lower_bound, lower_bound, df[col])\n","#     df[col] = np.where(df[col] > upper_bound, upper_bound, df[col])\n","#     return df\n","\n","# # Terapkan winsorizing pada semua kolom numerik\n","# for col in numerical_cols:\n","#     df = winsorize_col(df, col, lower_bounds[col], upper_bounds[col])\n","\n","# print(\"Dataframe setelah winsorizing:\")\n","# df"]},{"cell_type":"markdown","source":["## **Feature Importance**"],"metadata":{"id":"ombks0HhNcep"}},{"cell_type":"code","execution_count":34,"metadata":{"scrolled":true,"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"OcS2Aw28N8RL","outputId":"790f9328-2ffb-4562-eaff-d9ff1ba2d63b","executionInfo":{"status":"ok","timestamp":1745304826203,"user_tz":-420,"elapsed":117440,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              feature    importance\n","38       EXT_SOURCE_2  6.904549e-02\n","39       EXT_SOURCE_3  6.251735e-02\n","15         DAYS_BIRTH  4.867252e-02\n","18    DAYS_ID_PUBLISH  4.825279e-02\n","17  DAYS_REGISTRATION  4.731322e-02\n","..                ...           ...\n","68   FLAG_DOCUMENT_17  4.035629e-05\n","55    FLAG_DOCUMENT_4  9.975477e-07\n","19         FLAG_MOBIL  0.000000e+00\n","61   FLAG_DOCUMENT_10  0.000000e+00\n","63   FLAG_DOCUMENT_12  0.000000e+00\n","\n","[79 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-be9fe05b-fe99-4d83-b9dc-25178500ae16\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature</th>\n","      <th>importance</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>38</th>\n","      <td>EXT_SOURCE_2</td>\n","      <td>6.904549e-02</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>EXT_SOURCE_3</td>\n","      <td>6.251735e-02</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>DAYS_BIRTH</td>\n","      <td>4.867252e-02</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>DAYS_ID_PUBLISH</td>\n","      <td>4.825279e-02</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>DAYS_REGISTRATION</td>\n","      <td>4.731322e-02</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>68</th>\n","      <td>FLAG_DOCUMENT_17</td>\n","      <td>4.035629e-05</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>FLAG_DOCUMENT_4</td>\n","      <td>9.975477e-07</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>FLAG_MOBIL</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>FLAG_DOCUMENT_10</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>63</th>\n","      <td>FLAG_DOCUMENT_12</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>79 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-be9fe05b-fe99-4d83-b9dc-25178500ae16')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-be9fe05b-fe99-4d83-b9dc-25178500ae16 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-be9fe05b-fe99-4d83-b9dc-25178500ae16');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7877bf7b-bfd9-4274-bbca-727a3d00af39\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7877bf7b-bfd9-4274-bbca-727a3d00af39')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7877bf7b-bfd9-4274-bbca-727a3d00af39 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_b2f711b4-c0b7-42a0-887b-9590dde0d399\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('feature_importances')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_b2f711b4-c0b7-42a0-887b-9590dde0d399 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('feature_importances');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"feature_importances","summary":"{\n  \"name\": \"feature_importances\",\n  \"rows\": 79,\n  \"fields\": [\n    {\n      \"column\": \"feature\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 79,\n        \"samples\": [\n          \"AMT_REQ_CREDIT_BUREAU_QRT\",\n          \"EXT_SOURCE_2\",\n          \"OBS_60_CNT_SOCIAL_CIRCLE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"importance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01633701036544104,\n        \"min\": 0.0,\n        \"max\": 0.06904548859511155,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          0.04731322120327857,\n          0.007083798822487959,\n          0.03537508206035695\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":34}],"source":["import pandas as pd\n","from sklearn.ensemble import RandomForestClassifier\n","\n","# Assuming df_ap_train is already loaded as in the previous code\n","\n","# Separate features (X) and target variable (y)\n","X = df.drop('TARGET', axis=1)\n","y = df['TARGET']\n","\n","# Select only numerical features for the model\n","numeric_cols = X.select_dtypes(include=['number']).columns\n","X = X[numeric_cols]\n","\n","# Fill missing values with the mean (you can choose other strategies)\n","X = X.fillna(X.mean())\n","\n","# Convert target variable to int type\n","y = y.astype(int) # This line converts the target variable to integer type\n","\n","# Initialize and train a RandomForestClassifier (you can use other models)\n","model = RandomForestClassifier(n_estimators=100, random_state=42)\n","model.fit(X, y)\n","\n","# Get feature importances\n","feature_importances = pd.DataFrame({'feature': X.columns, 'importance': model.feature_importances_})\n","feature_importances = feature_importances.sort_values('importance', ascending=False)\n","\n","feature_importances"]},{"cell_type":"code","source":["# prompt: plot feature importance\n","\n","import matplotlib.pyplot as plt\n","\n","# Assuming feature_importances DataFrame is already created as in the previous code\n","\n","plt.figure(figsize=(10, 6))\n","plt.barh(feature_importances['feature'][:20], feature_importances['importance'][:20])\n","plt.xlabel(\"Feature Importance\")\n","plt.ylabel(\"Feature\")\n","plt.title(\"Top 20 Feature Importance\")\n","plt.gca().invert_yaxis() # Invert y-axis to show the most important features at the top\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"8MZloVcZP_Uw","outputId":"c2e2abd5-f314-4f37-df07-fa4ca71f4740","executionInfo":{"status":"ok","timestamp":1745304826504,"user_tz":-420,"elapsed":302,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":35,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["fi = feature_importances['feature'][:20].to_list()"],"metadata":{"id":"S67lYMh2RZ8z","executionInfo":{"status":"ok","timestamp":1745304826506,"user_tz":-420,"elapsed":1,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":36,"outputs":[]},{"cell_type":"markdown","source":["# **Encoding**"],"metadata":{"id":"QDfVXjZ4NiwR"}},{"cell_type":"code","source":["data = df[fi+['TARGET']]"],"metadata":{"id":"NHFNf0NLS-SE","executionInfo":{"status":"ok","timestamp":1745304826520,"user_tz":-420,"elapsed":13,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["data.to_csv('processed_data.csv', index=False)"],"metadata":{"id":"xjkLfPqmC7e4","executionInfo":{"status":"ok","timestamp":1745304830400,"user_tz":-420,"elapsed":3881,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":38,"outputs":[]},{"cell_type":"markdown","source":["# **Modelling**"],"metadata":{"id":"E3f2QtnTt6mw"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X = data.drop(columns=['TARGET'])  # Fitur\n","y = data['TARGET']  # Target\n","\n","# Bagi data menjadi set pelatihan dan pengujian\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"lC9bsaUosy5s","executionInfo":{"status":"ok","timestamp":1745304830485,"user_tz":-420,"elapsed":84,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["from imblearn.over_sampling import SMOTE\n","\n","# Apply SMOTE to oversample the minority class\n","smote = SMOTE(random_state=42)\n","X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)"],"metadata":{"id":"66n0CHXdtL9Q","executionInfo":{"status":"ok","timestamp":1745304833333,"user_tz":-420,"elapsed":2846,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["print(\"Jumlah sampel per kelas sebelum SMOTE:\")\n","print(y.value_counts())\n","\n","print(\"\\nJumlah sampel per kelas setelah SMOTE (pada data training):\")\n","print(pd.Series(y_train_resampled).value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iOkGmDRyfsyp","executionInfo":{"status":"ok","timestamp":1745304833350,"user_tz":-420,"elapsed":15,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}},"outputId":"fc773ec5-8e62-495c-b5c7-5f7a43b37a94"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["Jumlah sampel per kelas sebelum SMOTE:\n","TARGET\n","0    282686\n","1     24825\n","Name: count, dtype: int64\n","\n","Jumlah sampel per kelas setelah SMOTE (pada data training):\n","TARGET\n","0    226132\n","1    226132\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","source":["# Scaling/standarisasi menggunakan standardscaler\n","from sklearn.preprocessing import StandardScaler # Import StandardScaler\n","scaler = StandardScaler()\n","\n","X_train_scaled = scaler.fit_transform(X_train_resampled)     # hanya fit di train\n","X_test_scaled = scaler.transform(X_test)           # transform test pakai mean & std dari train"],"metadata":{"id":"oW3QsFVNQoYS","executionInfo":{"status":"ok","timestamp":1745305096068,"user_tz":-420,"elapsed":150,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":44,"outputs":[]},{"cell_type":"markdown","source":["## **XGBOOST**"],"metadata":{"id":"Fv1csA78uOjF"}},{"cell_type":"code","source":["from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score, accuracy_score, classification_report, roc_auc_score, confusion_matrix, recall_score, precision_score\n","import xgboost as xgb\n","xgb_model = xgb.XGBClassifier(random_state=42)\n","\n","xgb_model.fit(X_train_scaled, y_train_resampled)\n","\n","y_pred_xgb = xgb_model.predict(X_test_scaled)\n","\n","accuracy_xgb = accuracy_score(y_test, y_pred_xgb)\n","roc_auc_xgb = roc_auc_score(y_test, y_pred_xgb)\n","recall_xgb = recall_score(y_test, y_pred_xgb)\n","precision_xgb = precision_score(y_test, y_pred_xgb)\n","\n","print(f\"Accuracy (XGBoost): {accuracy_xgb}\")\n","print(f\"ROC-AUC (XGBoost): {roc_auc_xgb}\")\n","print(f\"Recall (XGBoost): {recall_xgb}\")\n","print(f\"Precision (XGBoost): {precision_xgb}\")\n","print(classification_report(y_test, y_pred_xgb))\n","\n","cm_xgb = confusion_matrix(y_test, y_pred_xgb)\n","print(\"Confusion Matrix (XGBoost):\\n\", cm_xgb)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nVVfH21qtXJR","outputId":"bb9060ad-d6d9-4f8a-b4bc-80abe0e1df7d","executionInfo":{"status":"ok","timestamp":1745305106564,"user_tz":-420,"elapsed":5034,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy (XGBoost): 0.9104759117441426\n","ROC-AUC (XGBoost): 0.5242995440003579\n","Recall (XGBoost): 0.0640533441099212\n","Precision (XGBoost): 0.2661628883291352\n","              precision    recall  f1-score   support\n","\n","           0       0.92      0.98      0.95     56554\n","           1       0.27      0.06      0.10      4949\n","\n","    accuracy                           0.91     61503\n","   macro avg       0.59      0.52      0.53     61503\n","weighted avg       0.87      0.91      0.88     61503\n","\n","Confusion Matrix (XGBoost):\n"," [[55680   874]\n"," [ 4632   317]]\n"]}]},{"cell_type":"markdown","source":["# **LightGBM**"],"metadata":{"id":"264kmmGvS5xp"}},{"cell_type":"code","source":["import lightgbm as lgb\n","\n","lgb_model = lgb.LGBMClassifier(random_state=42)\n","\n","lgb_model.fit(X_train_scaled, y_train_resampled)\n","\n","y_pred_lgb = lgb_model.predict(X_test_scaled)\n","\n","accuracy_lgb = accuracy_score(y_test, y_pred_lgb)\n","roc_auc_lgb = roc_auc_score(y_test, y_pred_lgb)\n","recall_lgb = recall_score(y_test, y_pred_lgb)\n","precision_lgb = precision_score(y_test, y_pred_lgb)\n","\n","print(f\"Accuracy (LightGBM): {accuracy_lgb}\")\n","print(f\"ROC-AUC (LightGBM): {roc_auc_lgb}\")\n","print(f\"Recall (LightGBM): {recall_lgb}\")\n","print(f\"Precision (LightGBM): {precision_lgb}\")\n","print(classification_report(y_test, y_pred_lgb))\n","\n","cm_lgb = confusion_matrix(y_test, y_pred_lgb)\n","print(\"Confusion Matrix (LightGBM):\\n\", cm_lgb)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nqCDCGrbSs7B","executionInfo":{"status":"ok","timestamp":1745306221472,"user_tz":-420,"elapsed":11625,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}},"outputId":"10ab182f-ec35-41e4-d391-532f9ecf5772"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["[LightGBM] [Info] Number of positive: 226132, number of negative: 226132\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.024045 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 4168\n","[LightGBM] [Info] Number of data points in the train set: 452264, number of used features: 20\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n","Accuracy (LightGBM): 0.9143456416760158\n","ROC-AUC (LightGBM): 0.514050347530024\n","Recall (LightGBM): 0.036977167104465546\n","Precision (LightGBM): 0.2671532846715328\n","              precision    recall  f1-score   support\n","\n","           0       0.92      0.99      0.96     56554\n","           1       0.27      0.04      0.06      4949\n","\n","    accuracy                           0.91     61503\n","   macro avg       0.59      0.51      0.51     61503\n","weighted avg       0.87      0.91      0.88     61503\n","\n","Confusion Matrix (LightGBM):\n"," [[56052   502]\n"," [ 4766   183]]\n"]}]},{"cell_type":"markdown","source":["## **Random Forest**"],"metadata":{"id":"lZsPZwz4uWtx"}},{"cell_type":"code","source":["rf_model = RandomForestClassifier(random_state=42)\n","\n","rf_model.fit(X_train_scaled, y_train_resampled)\n","\n","y_pred_rf = rf_model.predict(X_test_scaled)\n","\n","accuracy_rf = accuracy_score(y_test, y_pred_rf)\n","roc_auc_rf = roc_auc_score(y_test, y_pred_rf)\n","recall_rf = recall_score(y_test, y_pred_rf)\n","precision_rf = precision_score(y_test, y_pred_rf)\n","\n","print(f\"Accuracy (Random Forest): {accuracy_rf}\")\n","print(f\"ROC-AUC (Random Forest): {roc_auc_rf}\")\n","print(f\"Recall (Random Forest): {recall_rf}\")\n","print(f\"Precision (Random Forest): {precision_rf}\")\n","print(classification_report(y_test, y_pred_rf))\n","\n","cm_rf = confusion_matrix(y_test, y_pred_rf)\n","print(\"Confusion Matrix (Random Forest):\\n\", cm_rf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0byKL1ATuD0e","outputId":"064db463-e308-4676-fc69-78194232ecda","executionInfo":{"status":"ok","timestamp":1745305377673,"user_tz":-420,"elapsed":260371,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy (Random Forest): 0.8907045184787734\n","ROC-AUC (Random Forest): 0.530603796807859\n","Recall (Random Forest): 0.10143463325924429\n","Precision (Random Forest): 0.18077061577241627\n","              precision    recall  f1-score   support\n","\n","           0       0.92      0.96      0.94     56554\n","           1       0.18      0.10      0.13      4949\n","\n","    accuracy                           0.89     61503\n","   macro avg       0.55      0.53      0.54     61503\n","weighted avg       0.86      0.89      0.88     61503\n","\n","Confusion Matrix (Random Forest):\n"," [[54279  2275]\n"," [ 4447   502]]\n"]}]},{"cell_type":"markdown","source":["# **SVM**"],"metadata":{"id":"xePtIM2vlbdQ"}},{"cell_type":"code","source":["# from sklearn.svm import SVC\n","# from sklearn.metrics import accuracy_score, roc_auc_score, recall_score, precision_score, classification_report, confusion_matrix\n","\n","# # Inisialisasi model SVM\n","# svm_model = SVC(kernel='rbf', probability=True, random_state=42)\n","\n","# # Fit model pada data latih\n","# svm_model.fit(X_train_resampled, y_train_resampled)\n","\n","# # Prediksi pada data uji\n","# y_pred_svm = svm_model.predict(X_test_resampled)\n","# y_proba_svm = svm_model.predict_proba(X_test_resampled)[:, 1]  # untuk ROC-AUC\n","\n","# # Evaluasi\n","# accuracy_svm = accuracy_score(y_test, y_pred_svm)\n","# roc_auc_svm = roc_auc_score(y_test, y_proba_svm)\n","# recall_svm = recall_score(y_test, y_pred_svm)\n","# precision_svm = precision_score(y_test, y_pred_svm)\n","\n","# # Cetak hasil\n","# print(f\"Accuracy (SVM): {accuracy_svm}\")\n","# print(f\"ROC-AUC (SVM): {roc_auc_svm}\")\n","# print(f\"Recall (SVM): {recall_svm}\")\n","# print(f\"Precision (SVM): {precision_svm}\")\n","# print(classification_report(y_test, y_pred_svm))\n","\n","# # Confusion Matrix\n","# cm_svm = confusion_matrix(y_test, y_pred_svm)\n","# print(\"Confusion Matrix (SVM):\\n\", cm_svm)"],"metadata":{"id":"SQ5TGXkglmHi","executionInfo":{"status":"aborted","timestamp":1745304833536,"user_tz":-420,"elapsed":171340,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Regresi Logistik**"],"metadata":{"id":"rX0NESLZP0OW"}},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","\n","# Assuming X_train_resampled, y_train_resampled, and X_test are already defined as in your previous code\n","\n","# Initialize Logistic Regression model\n","logreg_model = LogisticRegression(random_state=42, max_iter=1000) # Increased max_iter\n","\n","# Train the model\n","logreg_model.fit(X_train_scaled, y_train_resampled)\n","\n","# Make predictions on the test set\n","y_pred_logreg = logreg_model.predict(X_test_scaled)\n","\n","# Evaluate the model\n","accuracy_logreg = accuracy_score(y_test, y_pred_logreg)\n","roc_auc_logreg = roc_auc_score(y_test, y_pred_logreg)\n","recall_logreg = recall_score(y_test, y_pred_logreg)\n","precision_logreg = precision_score(y_test, y_pred_logreg)\n","print(f\"Accuracy (Logistic Regression): {accuracy_logreg}\")\n","print(f\"ROC-AUC (Logistic Regression): {roc_auc_logreg}\")\n","print(f\"Recall (Logistic Regression): {recall_logreg}\")\n","print(f\"Precision (Logistic Regression): {precision_logreg}\")\n","\n","# Classification report\n","print(classification_report(y_test, y_pred_logreg))\n","\n","# Confusion matrix\n","cm_logreg = confusion_matrix(y_test, y_pred_logreg)\n","print(\"Confusion Matrix (Logistic Regression):\\n\", cm_logreg)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S5Bniom6PsKL","executionInfo":{"status":"ok","timestamp":1745306252599,"user_tz":-420,"elapsed":872,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}},"outputId":"8223e0a1-fd40-4ed8-dd91-261110652f2e"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy (Logistic Regression): 0.6811700242264604\n","ROC-AUC (Logistic Regression): 0.6575593545946422\n","Recall (Logistic Regression): 0.6294200848656294\n","Precision (Logistic Regression): 0.14911440880804214\n","              precision    recall  f1-score   support\n","\n","           0       0.95      0.69      0.80     56554\n","           1       0.15      0.63      0.24      4949\n","\n","    accuracy                           0.68     61503\n","   macro avg       0.55      0.66      0.52     61503\n","weighted avg       0.89      0.68      0.75     61503\n","\n","Confusion Matrix (Logistic Regression):\n"," [[38779 17775]\n"," [ 1834  3115]]\n"]}]},{"cell_type":"markdown","source":["# **Ensemble Stacking**"],"metadata":{"id":"4R_5dCEiQHHm"}},{"cell_type":"code","source":["from sklearn.ensemble import StackingClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import SVC\n","from sklearn.ensemble import RandomForestClassifier\n","from xgboost import XGBClassifier\n","from sklearn.metrics import accuracy_score, roc_auc_score, recall_score, precision_score, classification_report, confusion_matrix\n","\n","# Base models\n","estimators = [\n","    ('rf', RandomForestClassifier(random_state=42)),\n","    # ('svm', SVC(probability=True, random_state=42)),\n","    ('xgb', XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42))\n","]\n","\n","# Meta-model\n","final_estimator = LogisticRegression()\n","\n","# Stacking Classifier\n","stack_model = StackingClassifier(\n","    estimators=estimators,\n","    final_estimator=final_estimator,\n","    cv=5,\n","    passthrough=True,  # optional: include base model features in final model\n","    n_jobs=-1\n",")\n","\n","# Fit stacking model\n","stack_model.fit(X_train_scaled, y_train_resampled)\n","\n","# Predict\n","y_pred_stack = stack_model.predict(X_test_scaled)\n","y_proba_stack = stack_model.predict_proba(X_test_scaled)[:, 1]\n","\n","# Evaluation\n","accuracy_stack = accuracy_score(y_test, y_pred_stack)\n","roc_auc_stack = roc_auc_score(y_test, y_proba_stack)\n","recall_stack = recall_score(y_test, y_pred_stack)\n","precision_stack = precision_score(y_test, y_pred_stack)\n","\n","# Print metrics\n","print(f\"Accuracy (Stacking): {accuracy_stack}\")\n","print(f\"ROC-AUC (Stacking): {roc_auc_stack}\")\n","print(f\"Recall (Stacking): {recall_stack}\")\n","print(f\"Precision (Stacking): {precision_stack}\")\n","print(classification_report(y_test, y_pred_stack))\n","\n","# Confusion Matrix\n","cm_stack = confusion_matrix(y_test, y_pred_stack)\n","print(\"Confusion Matrix (Stacking):\\n\", cm_stack)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fvdoy1EuQJ-w","executionInfo":{"status":"ok","timestamp":1745307347107,"user_tz":-420,"elapsed":122429,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}},"outputId":"e67e2a43-e768-4a0e-f819-29a62d7104aa"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy (Stacking): 0.8989317594263695\n","ROC-AUC (Stacking): 0.6848814658821533\n","Recall (Stacking): 0.09315013133966459\n","Precision (Stacking): 0.2105984467793513\n","              precision    recall  f1-score   support\n","\n","           0       0.92      0.97      0.95     56554\n","           1       0.21      0.09      0.13      4949\n","\n","    accuracy                           0.90     61503\n","   macro avg       0.57      0.53      0.54     61503\n","weighted avg       0.87      0.90      0.88     61503\n","\n","Confusion Matrix (Stacking):\n"," [[54826  1728]\n"," [ 4488   461]]\n"]}]},{"cell_type":"markdown","source":["# **Streamlit**"],"metadata":{"id":"VtAmS3seQURl"}},{"cell_type":"code","source":["!pip install streamlit"],"metadata":{"id":"742YNleDotWG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1745307486540,"user_tz":-420,"elapsed":4446,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}},"outputId":"4adf21b7-1e18-48cb-a604-feb1024d8181"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting streamlit\n","  Downloading streamlit-1.44.1-py3-none-any.whl.metadata (8.9 kB)\n","Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n","Requirement already satisfied: blinker<2,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n","Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n","Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.1.8)\n","Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.0.2)\n","Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (24.2)\n","Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n","Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.1.0)\n","Requirement already satisfied: protobuf<6,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.4)\n","Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n","Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n","Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (9.1.2)\n","Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n","Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.13.2)\n","Collecting watchdog<7,>=2.1.5 (from streamlit)\n","  Downloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl.metadata (44 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.3/44.3 kB\u001b[0m \u001b[31m3.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n","Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n","  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n","Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n","Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n","Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.35.0)\n","Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.3.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.1.31)\n","Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n","Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n","Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2024.10.1)\n","Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n","Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.24.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n","Downloading streamlit-1.44.1-py3-none-any.whl (9.8 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.8/9.8 MB\u001b[0m \u001b[31m82.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m121.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl (79 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.1/79.1 kB\u001b[0m \u001b[31m7.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: watchdog, pydeck, streamlit\n","Successfully installed pydeck-0.9.1 streamlit-1.44.1 watchdog-6.0.0\n"]}]},{"cell_type":"code","source":["import streamlit as st\n","import pandas as pd\n","import xgboost as xgb\n","import joblib\n","\n","from sklearn.model_selection import train_test_split\n","from imblearn.over_sampling import SMOTE\n","\n","# Load data training\n","data = pd.read_csv(\"processed_data.csv\")\n","\n","# Pisahkan fitur dan target\n","X = data.drop(columns=[\"TARGET\"])\n","y = data[\"TARGET\"]\n","\n","# Bagi data\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# SMOTE untuk menangani data imbalance\n","smote = SMOTE(random_state=42)\n","X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)\n","\n","# Train XGBoost model\n","model = xgb.XGBClassifier(random_state=42)\n","model.fit(X_train_resampled, y_train_resampled)\n","\n","# Optional: Simpan model\n","# joblib.dump(model, 'xgb_model.pkl')\n","\n","# Streamlit app\n","st.title(\"Prediksi Potensial Nasabah Kredit\")\n","\n","st.write(\"Masukkan detail nasabah di bawah ini:\")\n","\n","# Buat input form berdasarkan kolom fitur\n","user_input = {}\n","for col in X.columns:\n","    # Input numerik\n","    val = st.number_input(f\"{col}\", value=float(X[col].mean()))\n","    user_input[col] = val\n","\n","# Ubah menjadi dataframe\n","user_df = pd.DataFrame([user_input])\n","\n","# Prediksi\n","if st.button(\"Prediksi Potensial\"):\n","    prediction = model.predict(user_df)[0]\n","    probability = model.predict_proba(user_df)[0][1]\n","\n","    if prediction == 1:\n","        st.success(f\"✅ Nasabah ini diprediksi **Potensial** untuk kredit. (Probabilitas: {probability:.2f})\")\n","    else:\n","        st.warning(f\"❌ Nasabah ini diprediksi **Tidak Potensial** untuk kredit. (Probabilitas: {probability:.2f})\")"],"metadata":{"id":"2ryPyDLAob1A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1745307506867,"user_tz":-420,"elapsed":18688,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}},"outputId":"4fbe65c5-13de-4f90-a783-21474eb41cb6"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stderr","text":["2025-04-22 07:38:25.633 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.168 \n","  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n","  command:\n","\n","    streamlit run /usr/local/lib/python3.11/dist-packages/colab_kernel_launcher.py [ARGUMENTS]\n","2025-04-22 07:38:26.177 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.180 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.182 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.185 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.186 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.187 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.197 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.198 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.201 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.201 Session state does not function when running a script without `streamlit run`\n","2025-04-22 07:38:26.202 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.205 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.212 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.229 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.230 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.235 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.236 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.237 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.240 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.247 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.249 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.249 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.253 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.256 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.260 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.261 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.262 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.268 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.269 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.269 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.271 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.290 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.291 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.292 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.293 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.295 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.298 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.301 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.303 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.304 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.310 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.315 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.317 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.319 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.320 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.321 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.323 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.327 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.331 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.331 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.332 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.335 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.336 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.339 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.342 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.343 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.343 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.344 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.346 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.347 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.353 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.359 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.360 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.360 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.361 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.361 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.366 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.367 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.367 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.368 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.368 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.369 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.385 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.398 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.398 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.404 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.405 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.405 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.407 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.423 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.427 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.430 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.433 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.444 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.450 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.450 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.451 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.451 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.453 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.455 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.459 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.465 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.465 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.466 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.466 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.467 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.473 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.474 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.480 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.480 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.481 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.481 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.483 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.485 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.486 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.488 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.494 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.494 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.496 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.497 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.499 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.500 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.507 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.507 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.509 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.510 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.513 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.514 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.522 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.523 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.524 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.526 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.528 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.530 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.537 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.538 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.540 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.541 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.543 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.544 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:38:26.552 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"]}]},{"cell_type":"markdown","source":["## **Logistic Regression**"],"metadata":{"id":"BaJiGaVt1P1P"}},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","\n","# Assuming X_train_resampled, y_train_resampled, and X_test are already defined as in your previous code\n","\n","# Initialize Logistic Regression model\n","logreg_model = LogisticRegression(random_state=42, max_iter=1000) # Increased max_iter\n","\n","# Train the model\n","logreg_model.fit(X_train_resampled, y_train_resampled)\n","\n","# Make predictions on the test set\n","y_pred_logreg = logreg_model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy_logreg = accuracy_score(y_test, y_pred_logreg)\n","roc_auc_logreg = roc_auc_score(y_test, y_pred_logreg)\n","recall_logreg = recall_score(y_test, y_pred_logreg)\n","precision_logreg = precision_score(y_test, y_pred_logreg)\n","print(f\"Accuracy (Logistic Regression): {accuracy_logreg}\")\n","print(f\"ROC-AUC (Logistic Regression): {roc_auc_logreg}\")\n","print(f\"Recall (Logistic Regression): {recall_logreg}\")\n","print(f\"Precision (Logistic Regression): {precision_logreg}\")\n","\n","# Classification report\n","print(classification_report(y_test, y_pred_logreg))\n","\n","# Confusion matrix\n","cm_logreg = confusion_matrix(y_test, y_pred_logreg)\n","print(\"Confusion Matrix (Logistic Regression):\\n\", cm_logreg)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E2ehlm40w1CC","outputId":"a96cfa40-fa6f-418e-b75f-326b07d3e203"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy (Logistic Regression): 0.5462660173190552\n","ROC-AUC (Logistic Regression): 0.6079221348805152\n","Recall (Logistic Regression): 0.6796233219795632\n","Precision (Logistic Regression): 0.09940800656467969\n","              precision    recall  f1-score   support\n","\n","           0       0.96      0.54      0.69     66260\n","           1       0.10      0.68      0.17      4991\n","\n","    accuracy                           0.55     71251\n","   macro avg       0.53      0.61      0.43     71251\n","weighted avg       0.90      0.55      0.65     71251\n","\n","Confusion Matrix (Logistic Regression):\n"," [[35530 30730]\n"," [ 1599  3392]]\n"]}]},{"cell_type":"markdown","source":["# **Streamlit**"],"metadata":{"id":"QlaaX1D823SB"}},{"cell_type":"code","source":["!pip install streamlit"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nuBaYFaJ2tEX","outputId":"598e978b-24a2-4639-f513-de7f634f3556"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting streamlit\n","  Downloading streamlit-1.43.1-py2.py3-none-any.whl.metadata (8.9 kB)\n","Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n","Requirement already satisfied: blinker<2,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n","Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n","Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.1.8)\n","Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.26.4)\n","Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (24.2)\n","Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n","Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.1.0)\n","Requirement already satisfied: protobuf<6,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.25.6)\n","Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n","Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n","Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (9.0.0)\n","Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n","Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.12.2)\n","Collecting watchdog<7,>=2.1.5 (from streamlit)\n","  Downloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl.metadata (44 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.3/44.3 kB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n","Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n","  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n","Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.5)\n","Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n","Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.29.0)\n","Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.1)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.3.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.1.31)\n","Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n","Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.1.0)\n","Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2024.10.1)\n","Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n","Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.23.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n","Downloading streamlit-1.43.1-py2.py3-none-any.whl (9.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.7/9.7 MB\u001b[0m \u001b[31m54.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m59.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl (79 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.1/79.1 kB\u001b[0m \u001b[31m7.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: watchdog, pydeck, streamlit\n","Successfully installed pydeck-0.9.1 streamlit-1.43.1 watchdog-6.0.0\n"]}]},{"cell_type":"code","source":["# prompt: create streamlit code to predict\n","\n","import streamlit as st\n","import pandas as pd\n","import numpy as np\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.model_selection import train_test_split\n","from imblearn.over_sampling import SMOTE\n","from sklearn.metrics import accuracy_score, roc_auc_score, recall_score, precision_score, classification_report, confusion_matrix\n","import xgboost as xgb\n","from sklearn.linear_model import LogisticRegression\n","\n","# Load your preprocessed data (replace with your actual data loading)\n","# Make sure 'df_ap_combined' is available in your Streamlit environment\n","# For example:\n","# df_ap_combined = pd.read_csv(\"your_preprocessed_data.csv\")\n","\n","# Placeholder for your data (replace this with your actual data)\n","data = pd.DataFrame({'TARGET': [0,1,0,1,0,1,0,1], 'EXT_SOURCE_2': [0.5,0.8,0.2,0.9,0.3,0.7,0.6,0.1],\n"," 'DAYS_BIRTH': [10000, 12000, 15000, 9000, 11000, 8000, 13000, 14000],\n"," 'DAYS_REGISTRATION': [1,2,3,4,5,6,7,8],\n"," 'DAYS_ID_PUBLISH': [1,2,3,4,5,6,7,8],\n"," 'DAYS_EMPLOYED': [100,200,300,400,500,600,700,800]})\n","\n","# Streamlit app\n","st.title(\"Home Credit Default Risk Prediction\")\n","\n","# Input features\n","st.sidebar.header(\"Input Features\")\n","ext_source_2 = st.sidebar.slider(\"EXT_SOURCE_2\", float(data['EXT_SOURCE_2'].min()), float(data['EXT_SOURCE_2'].max()), float(data['EXT_SOURCE_2'].mean()))\n","days_birth = st.sidebar.slider(\"DAYS_BIRTH\", int(data['DAYS_BIRTH'].min()), int(data['DAYS_BIRTH'].max()), int(data['DAYS_BIRTH'].mean()))\n","days_registration = st.sidebar.slider(\"DAYS_REGISTRATION\", int(data['DAYS_REGISTRATION'].min()), int(data['DAYS_REGISTRATION'].max()), int(data['DAYS_REGISTRATION'].mean()))\n","days_id_publish = st.sidebar.slider(\"DAYS_ID_PUBLISH\", int(data['DAYS_ID_PUBLISH'].min()), int(data['DAYS_ID_PUBLISH'].max()), int(data['DAYS_ID_PUBLISH'].mean()))\n","days_employed = st.sidebar.slider(\"DAYS_EMPLOYED\", int(data['DAYS_EMPLOYED'].min()), int(data['DAYS_EMPLOYED'].max()), int(data['DAYS_EMPLOYED'].mean()))\n","\n","\n","\n","# Create input DataFrame\n","input_data = pd.DataFrame({\n","    'EXT_SOURCE_2': [ext_source_2],\n","    'DAYS_BIRTH': [days_birth],\n","    'DAYS_REGISTRATION': [days_registration],\n","    'DAYS_ID_PUBLISH': [days_id_publish],\n","    'DAYS_EMPLOYED': [days_employed],\n","})\n","\n","# Preprocess input data (replace with your actual preprocessing steps)\n","# Example: fill missing values, encode categorical variables, etc.\n","# Example using the LabelEncoder for object columns (if needed)\n","for col in data.select_dtypes(include='object'):\n","    le = LabelEncoder()\n","    data[col] = le.fit_transform(data[col])\n","\n","# Assuming model is already trained\n","# Prediction\n","if st.button(\"Predict\"):\n","  # Replace with your actual model and features\n","  prediction = 1 #Dummy Value\n","\n","  st.write(f\"Prediction: {prediction}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gtcJkwI_2nQw","outputId":"9bee691b-b21c-42d4-b001-9029710051ce","executionInfo":{"status":"ok","timestamp":1745307552517,"user_tz":-420,"elapsed":87,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}}},"execution_count":52,"outputs":[{"output_type":"stream","name":"stderr","text":["2025-04-22 07:39:12.225 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.227 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.228 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.229 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.230 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.231 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.232 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.233 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.234 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.235 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.235 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.236 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.237 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.238 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.239 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.240 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.240 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.241 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.242 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.243 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.244 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.244 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.245 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.246 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.247 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.248 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.248 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.249 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.250 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.251 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.252 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.253 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.253 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-04-22 07:39:12.254 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"]}]},{"cell_type":"code","source":["!streamlit run app.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jbJCN8FYb8m1","executionInfo":{"status":"ok","timestamp":1745307698264,"user_tz":-420,"elapsed":517,"user":{"displayName":"Nadhilah Farhana","userId":"00165434677306781466"}},"outputId":"265ec570-10d7-421e-af10-7ef909b2b6b5"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["Usage: streamlit run [OPTIONS] TARGET [ARGS]...\n","Try 'streamlit run --help' for help.\n","\n","Error: Invalid value: File does not exist: app.py\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"Mp78MnVfcdy-"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"1kejKAHshETAVcXAmRKrrmrj6i15LdbP6","timestamp":1745326006973},{"file_id":"1DO72dTiDuFusDVjfDfrUbti_7Qjw--Ni","timestamp":1745150251083}]},"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.7"},"vp":{"vp_config_version":"1.0.0","vp_menu_width":273,"vp_note_display":false,"vp_note_width":0,"vp_position":{"width":278},"vp_section_display":false,"vp_signature":"VisualPython"}},"nbformat":4,"nbformat_minor":0}